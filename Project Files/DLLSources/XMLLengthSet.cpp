#include "CvGameCoreDLL.h"
#include "tinyxml2.h"

#include"xmlFiles.h"
#include "StartupErrorChecking.h"
#include "ThreadOverview.h"

// small class where the constructor reads XML lengths
// this way xml reading can take place prior to calling the CvGlobals constructor
struct loadXML
{
	loadXML();
};


static int getNumEntries(const std::string& path, const char* file)
{
	std::string fullPath = path;
	fullPath.append("/XML/");
	fullPath.append(file);
	tinyxml2::XMLDocument doc;
	doc.LoadFile(fullPath.c_str());
	if (doc.ErrorID() != tinyxml2::XML_SUCCESS)
	{
		fullPath = "Assets/XML/";
		fullPath.append(file);
		doc.LoadFile(fullPath.c_str());
	}

	tinyxml2::XMLElement* element = doc.FirstChildElement();
	element = element->FirstChildElement();
	if (element->FirstChildElement("Type") == NULL)
	{
		// most files have the entries inside two layers of parents
		// a few (diplomacy only?) only has one
		// detect this by looking for "Type"
		element = element->FirstChildElement();
	}

	int count = 0;
	while (element != NULL)
	{
		count++;
		element = element->NextSiblingElement();
	}
	return count;
}

static std::string GetCurrentDirectory(bool bLoadDLLPath)
{
	char buffer[MAX_PATH];
	GetModuleFileNameA(bLoadDLLPath ? GetModuleHandle("CvGameCoreDLL.dll") : NULL, buffer, MAX_PATH);
	std::string::size_type pos = std::string(buffer).find_last_of("\\/");

	return std::string(buffer).substr(0, pos);
}

template <typename T>
static void setSingleLength(const std::string& basePath, T& length)
{
	std::string file;
	file.append(xmlLocation<T>::folder()).append("/").append(xmlLocation<T>::file()).append(".xml");
	length = (T)getNumEntries(basePath, file.c_str());
	FAssert(length != (T)0);
}

#include "autogenerated\AutoXmlPreload.h"

loadXML MyXMLloader;


// CvGlobals constructor needs to run after the loadXML as it requires the global xml lengths to be set up
CvGlobals gGlobals;
ThreadOverviewClass ThreadOverview;

void setupVARINFO();


loadXML::loadXML()
{
	const std::string basePath = GetCurrentDirectory(true);

	setXmlLengthsAuto(basePath);
	setupVARINFO();
}

void testHardcodedXML()
{
	testAllXMLLengths();
}
