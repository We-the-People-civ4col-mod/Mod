#!/usr/bin/perl -w

#
# Script frontend to bin/Compile.bat
#
# Adds a menu to pick which DLL file to compile.
#

use strict;
use warnings;

use Cwd;

# add the ability to clear screen
use Win32::Console;
my $OUTPUT_SCREEN = Win32::Console->new(STD_OUTPUT_HANDLE);


menu();

sub printListOfDLLs
{
	print "1 Dynamic Assert\n";
	print "2 Dynamic Release\n";
	print "3 Dynamic Final Release\n";
	print "4 Hardcoded Assert\n";
	print "5 Hardcoded Release\n";
	print "6 Hardcoded Final Release\n";
}

sub menu
{
	$OUTPUT_SCREEN->Cls;

	print "Pick type of DLL to compile.\n";
	printListOfDLLs();
	
	print "\n";
	print "bat  Create a bat file to compile and run.\n";
	print "help Explains all the options\n";
	
	print "\n";
	print "If you are unsure of which DLL to use, type help.\n";
	print "If you are still unsure after reading help:\n";
	print " - if you modify the game files in any way, e.g add events, pick Dynamic Assert (1).\n";
	print " - in all other cases, pick Dynamic Release (2).\n";
	
	print "\n";
	print "Pick an option and press enter\n";
	
	my $input = <STDIN>;
	chomp $input;
	
	if ($input eq "1")
	{
		system("bin\\Compile.bat", "Assert");
	}
	elsif ($input eq "2")
	{
		system("bin\\Compile.bat", "Release");
	}
	elsif ($input eq "3")
	{
		system("bin\\Compile.bat", "FinalRelease");
	}
	elsif ($input eq "4")
	{
		system("bin\\Compile.bat", "Assert", "_HARDCODED", "-DHARDCODE_XML_VALUES");
	}
	elsif ($input eq "5")
	{
		system("bin\\Compile.bat", "Release", "_HARDCODED", "-DHARDCODE_XML_VALUES");
	}
	elsif ($input eq "6")
	{
		system("bin\\Compile.bat", "FinalRelease", "_HARDCODED", "-DHARDCODE_XML_VALUES");
	}
	elsif ($input eq "bat")
	{
		createBatMenu();
	}
	elsif ($input eq "help")
	{
		help();
		menu();
	}
	else
	{
		print "Not valid input\n\n";
		print "\n\nPress enter to try again\n";
		my $input = <STDIN>;
		menu();
	}
	exit();
}

sub createBatMenu
{
	print "Select type of DLL file, which should be used when starting with the bat file.\n";
	printListOfDLLs();
	my $input = <STDIN>;
	chomp $input;
	
	if ($input eq "1")
	{
		createBat("bin\\Compile.bat", "Assert");
	}
	elsif ($input eq "2")
	{
		createBat("bin\\Compile.bat", "Release");
	}
	elsif ($input eq "3")
	{
		createBat("bin\\Compile.bat", "FinalRelease");
	}
	elsif ($input eq "4")
	{
		createBat("bin\\Compile.bat", "Assert", "_HARDCODED", "-DHARDCODE_XML_VALUES");
	}
	elsif ($input eq "5")
	{
		createBat("bin\\Compile.bat", "Release", "_HARDCODED", "-DHARDCODE_XML_VALUES");
	}
	elsif ($input eq "6")
	{
		createBat("bin\\Compile.bat", "FinalRelease", "_HARDCODED", "-DHARDCODE_XML_VALUES");
	}
	else
	{
		print "Invalid input\n";
		<STDIN>;
	}
}

sub createBat
{
	shift;
	my $target = shift;
	my $hardcoded = shift;
	
	my $path = getcwd;
	
	my $mod = substr($path, 0, rindex($path, "/"));
	$mod = substr($mod, rindex($mod, "/") + 1);
	
	my $exe_dir = $path;
	
	for (1..3)
	{
		$exe_dir = substr($exe_dir, 0, rindex($exe_dir, "/"));
	}
	
	my $filename = "We The People - " . $target . ".bat";
	
	open(FH, '>', $filename) or die $!;
	
	print FH "\@echo off\n";
	print FH "\n";
	print FH "rem Autogenerated script to start Colonization directly int the We The People mod.\n";
	print FH "rem Compile the mod prior to starting if needed.\n";
	print FH "\n";
	print FH "cd \"$path\"\n";
	print FH "SET PATH=\%PATH\%;..\\..\\Compiler\\Microsoft Visual C++ Toolkit 2003\\bin\n";
	
	print FH "set TARGET=$target\n";
	if (defined $hardcoded)
	{
		print FH "set TEMP_DIR_POSTFIX=_HARDCODED\n";
		print FH "set CONFIG_CFLAGS= -DHARDCODE_XML_VALUES\n";
	}
	
	print FH "bin\\jom source_list /NOLOGO && ^\n";
	print FH "nmake precompile  /NOLOGO && ^\n";
	print FH "bin\\jom build && ^\n";
	
	print FH "cd \"$exe_dir\" && ^\n";
	print FH "echo Compilation complete && ^\n";
	print FH "echo Starting Colonization && ^\n";
	print FH "colonization.exe mod=\"$mod\"\n";

	
	close(FH);
	
	print "Creation of $filename complete.\n\n";
	print "Feel free to move it to a more conventient location (like desktop).\n";
	print "Note that it's custom made for the file paths on this specific computer.\n";
	print "Do not except it to work on other computers. They will have to make their own bat files.\n";
	print "\nPress enter to continue.\n";
	
	<STDIN>
	
}

sub help
{
	$OUTPUT_SCREEN->Cls;
	
	print "There are 3 types of DLL files.\n";
	print "1 Assert\n";
	print "   This will enable assert checks. An assert is a condition the programmer assumes to always be true.\n";
	print "   The game will then make a popup assert failure each time an assert check fails.\n";
	print "   Assert checks are useful for finding bugs. Sadly we do have a bunch of known assert failures.\n";
	print "   Runs 30% slower than release due to spending time on all the extra assert checks/calculations.\n";
	print "\n";
	print "2 Release\n";
	print "   This is the defualt DLL. Fast to play with and fast to compile.\n";
	print "\n";
	print "3 Final Release\n";
	print "   A better optimized version of Release. Takes 4-5 times longer to compile.\n";
	print "   Runs 10% faster than Release.\n";
	print "\n";
	print "Debug and Profile DLL files can only be compiled from within Visual Studio.\n";
	print "   The nature of those two makes them useless for anybody who isn't writing C++ code.\n";
	
	print "\n\nPress enter to continue\n";
	<STDIN>;
	$OUTPUT_SCREEN->Cls;
	
	print "All DLL files comes in two versions, dynamic and hardcoded\n\n";
	print "Dynamic\n";
	print "   Vanilla behavior. Will load xml data at startup of game.\n";
	print "\n";
	print "Hardcoded\n";
	print "   This will read the xml files at compile time and inform the compiler of the values.\n";
	print "   The compiler can then skip a lot of what if scenarios and generate code specific to our data.\n";
	print "   Also having the values directly in the program code unlocks CPU tricks for runtime optimization.\n";
	print "   The results is a faster DLL file with the tradeoff that you will need to compile again when changing xml.\n";
	print "\n";
	print "Which one to pick depends entirely on what you are trying to do.\n";
	print "If you plan on changing xml data and then playtest it, then adding the need to recompile would be a hassle.\n";
	print "If you just want to play or playtest and know you won't touch the xml files, then maybe hardcoding will work.\n";
	print "\n";
	print "When you pull updates from GitHub, always compile afterwards because maybe somebody changed the C++ code.\n";
	print "Not compiling might still go wrong even if you use a dynamic DLL file.\n";
	
	print "\n\nPress enter to continue\n";
	<STDIN>;
	$OUTPUT_SCREEN->Cls;
	
	print "Bat file creation\n";
	print "\n";
	print "Create a bat file to start the game with the mod in question loaded.\n";
	print "Prior to starting, it will compile the DLL file. This will be skipped if the DLL is up to date.\n";
	print "The main purpose of this is to ensure that you won't forget to compile when needed.\n";
	print "It's also conventient as the bat file can be moved to a place like the desktop, making it easy to start the mod.\n";
	print "\n";
	print "Multiple bat files can be created as an easy way to switch between different types of DLL files.\n";
	print "Using a bat file is highly recommended if you use a DLL with hardcoded xml data.\n";
	print "\n";
	print "The bat file will have file paths and mod name hardcoded into it. This allows it to be moved to anywhere on the disk.\n";
	print "However that also means it becomes computer and mod specific. Do not copy it to other computers.\n";
	print "If another computer requires a bat file, use this script on that computer to make a new bat file.\n";
	
	
	print "\n\nPress enter to continue\n";
	<STDIN>;
	$OUTPUT_SCREEN->Cls;
}