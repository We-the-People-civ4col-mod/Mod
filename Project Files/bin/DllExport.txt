CvArtFileMgr.h
	DllExport CvArtInfo##name* get##name##ArtInfo(const char *szArtDefineTag) const; \
	DllExport static CvArtFileMgr& GetInstance();
	DllExport void Init();
	DllExport void DeInit();
	DllExport void Reset();
	DllExport void buildArtFileInfoMaps();
CvCity.h
	DllExport bool canBeSelected() const;
	DllExport void updateSelectedCity();
	DllExport void doTask(TaskTypes eTask, int iData1 = -1, int iData2 = -1, bool bOption = false, bool bAlt = false, bool bShift = false, bool bCtrl = false);
	DllExport void chooseProduction(UnitTypes eTrainUnit = NO_UNIT, BuildingTypes eConstructBuilding = NO_BUILDING, bool bFinish = false, bool bFront = false);
	DllExport int getCityPlotIndex(const CvPlot* pPlot) const;
	DllExport bool canTrain(UnitTypes eUnit, bool bContinue = false, bool bTestVisible = false, bool bIgnoreCost = false, bool bIgnoreUpgrades = false) const;
	DllExport bool canConstruct(BuildingTypes eBuilding, bool bContinue = false, bool bTestVisible = false, bool bIgnoreCost = false) const;
	DllExport bool canConvince(FatherPointTypes eFatherPoint, bool bContinue = false, bool bTestVisible = false) const;
	DllExport bool isProduction() const;
	DllExport int getProductionTurnsLeft(UnitTypes eUnit, int iNum) const;
	DllExport int getProductionTurnsLeft(BuildingTypes eBuilding, int iNum) const;
	DllExport bool canHurry(HurryTypes eHurry, bool bTestVisible = false) const;
	DllExport CivilizationTypes getCivilizationType() const;
	DllExport CitySizeTypes getCitySizeType() const;
	DllExport bool isVisible(TeamTypes eTeam, bool bDebug) const;
	DllExport bool isCapital() const;
	DllExport int hurryGold(HurryTypes eHurry) const;
	DllExport int hurryPopulation(HurryTypes eHurry) const;
	DllExport bool isHasBuilding(BuildingTypes eIndex) const;
	DllExport int getID() const;
	DllExport IDInfo getIDInfo() const;
	DllExport int getX() const;
	DllExport int getY() const;
	DllExport CvPlot* plot() const;
	DllExport CvArea* area() const;
	DllExport bool isWallOverride() const;
	DllExport bool isBillboardDirty() const;
	DllExport void setBillboardDirty(bool bNewValue);
	DllExport bool isLayoutDirty() const;
	DllExport void setLayoutDirty(bool bNewValue);
	DllExport PlayerTypes getOwner() const;
	DllExport TeamTypes getTeam() const;
	DllExport bool isRevealed(TeamTypes eIndex, bool bDebug) const;
	DllExport const CvWString getName(uint uiForm = 0) const;
	DllExport const wchar* getNameKey() const;
	DllExport void pushOrder(OrderTypes eOrder, int iData1, int iData2, bool bSave, bool bPop, bool bAppend, bool bForce = false);
	DllExport void popOrder(int iNum, bool bFinish = false, bool bChoose = false);
	DllExport CLLNode<OrderData>* nextOrderQueueNode(CLLNode<OrderData>* pNode) const;
	DllExport CLLNode<OrderData>* headOrderQueueNode() const;
	DllExport void getVisibleBuildings(std::list<BuildingTypes>& kVisible, int& iNumGenerics) const;
	DllExport void getVisibleEffects(ZoomLevelTypes eCurrentZoom, std::vector<char const*>& kEffectNames) const;
	DllExport void getCityBillboardSizeIconColors(NiColorA& kDotColor, NiColorA& kTextColor) const;
	DllExport char const* getCityBillboardProductionIcon() const;
	DllExport bool getCityBillboardTopBarValues(float& fStored, float& fRate, float& fRateExtra) const;
	DllExport bool getCityBillboardBottomBarValues(float& fStored, float& fRate, float& fRateExtra) const;
	DllExport const std::vector< std::pair<float, float> >& getWallOverridePoints() const;
CvDeal.h
	DllExport void kill(bool bKillTeam, TeamTypes eKillingTeam);
	DllExport int getID() const;
	DllExport PlayerTypes getFirstPlayer() const;
	DllExport PlayerTypes getSecondPlayer() const;
	DllExport CLLNode<TradeData>* nextFirstTradesNode(CLLNode<TradeData>* pNode) const;
	DllExport CLLNode<TradeData>* headFirstTradesNode() const;
	DllExport CLLNode<TradeData>* nextSecondTradesNode(CLLNode<TradeData>* pNode) const;
	DllExport CLLNode<TradeData>* headSecondTradesNode() const;
	DllExport bool isCancelable(PlayerTypes eByPlayer = NO_PLAYER, CvWString* pszReason = NULL);
	DllExport static bool isDual(TradeableItems eItem, bool bExcludePeace = false);
	DllExport static bool hasData(TradeableItems eItem);
	DllExport static bool isGold(TradeableItems eItem);
	DllExport static bool isEndWar(TradeableItems eItem);
	DllExport static TradeableItems getPeaceItem();
	DllExport static TradeableItems getGoldItem();
CvDiploParameters.h
	DllExport CvDiploParameters(PlayerTypes ePlayer = NO_PLAYER);
	DllExport virtual ~CvDiploParameters();
	DllExport void setWhoTalkingTo(PlayerTypes eWhoTalkingTo);
	DllExport PlayerTypes getWhoTalkingTo() const;
	DllExport void setDiploComment(DiploCommentTypes eCommentType);
	DllExport DiploCommentTypes getDiploComment() const;
	DllExport void setOurOfferList(const CLinkList<TradeData>& ourOffer);
	DllExport const CLinkList<TradeData>& getOurOfferList() const;
	DllExport void setTheirOfferList(const CLinkList<TradeData>& theirOffer);
	DllExport const CLinkList<TradeData>& getTheirOfferList() const;
	DllExport void setRenegotiate(bool bValue);
	DllExport bool getRenegotiate() const;
	DllExport void setAIContact(bool bValue);
	DllExport bool getAIContact() const;
	DllExport void setPendingDelete(bool bPending);
	DllExport bool getPendingDelete() const;
	DllExport void setData(int iData);
	DllExport int getData() const;
	DllExport void setHumanDiplo(bool bValue);
	DllExport bool getHumanDiplo() const;
	DllExport void setOurOffering(bool bValue);
	DllExport bool getOurOffering() const;
	DllExport void setTheirOffering(bool bValue);
	DllExport bool getTheirOffering() const;
	DllExport void setChatText(const wchar* szText);
	DllExport const wchar* getChatText() const;
	DllExport const std::vector<FVariable>& getDiploCommentArgs() const { return m_DiploCommentArgs; }
	DllExport const IDInfo& getTransport() const;
	DllExport void setTransport(const IDInfo& kTransport);
	DllExport const IDInfo& getCity() const;
	DllExport void setCity(const IDInfo& kCity);
	DllExport void read(FDataStreamBase& stream);
	DllExport void write(FDataStreamBase& stream) const;
CvDLLButtonPopup.h
	DllExport static CvDLLButtonPopup& getInstance();
	DllExport static void freeInstance();
	DllExport virtual void OnOkClicked(CvPopup* pPopup, PopupReturn *pPopupReturn, CvPopupInfo &info);
	DllExport virtual void OnAltExecute(CvPopup& popup, const PopupReturn& popupReturn, CvPopupInfo &info);
	DllExport virtual void OnEscape(CvPopup& pPopup, CvPopupInfo &info);
	DllExport virtual void OnFocus(CvPopup* pPopup, CvPopupInfo &info);
	DllExport bool launchButtonPopup(CvPopup* pPopup, CvPopupInfo &info);
CvDLLEntity.h
class DllExport CvDLLEntity
CvDLLWidgetData.h
	DllExport static CvDLLWidgetData& getInstance();
	DllExport static void freeInstance();
	DllExport void parseHelp(CvWStringBuffer &szBuffer, CvWidgetDataStruct &widgetDataStruct);
	DllExport bool executeAction( CvWidgetDataStruct &widgetDataStruct );
	DllExport bool executeAltAction( CvWidgetDataStruct &widgetDataStruct );
	DllExport bool executeDropOn(const CvWidgetDataStruct& destinationWidgetData, const CvWidgetDataStruct& sourceWidgetData);
	DllExport bool executeDoubleClick(const CvWidgetDataStruct& destinationWidgetData);
	DllExport bool isLink(const CvWidgetDataStruct &widgetDataStruct) const;
CvFractal.h
	enum DllExport FracVals
	DllExport void fracInit(int iNewXs, int iNewYs, int iGrain, CvRandom& random, int iFlags, CvFractal* pRifts=NULL, int iFracXExp=DEFAULT_FRAC_X_EXP, int iFracYExp=DEFAULT_FRAC_Y_EXP);
	DllExport void fracInitHinted(int iNewXs, int iNewYs, int iGrain, CvRandom& random, byte* pbyHints, int iHintsLength, int iFlags, CvFractal* pRifts, int iFracXExp=DEFAULT_FRAC_X_EXP, int iFracYExp=DEFAULT_FRAC_Y_EXP);
	DllExport int getHeight(int x, int y);
	DllExport int getHeightFromPercent(int iPercent);
	DllExport void reset();
	DllExport CvFractal();
	DllExport virtual ~CvFractal();
	DllExport void uninit();
CvGame.h
	DllExport void init(HandicapTypes eHandicap);
	DllExport void reset(HandicapTypes eHandicap = NO_HANDICAP, bool bConstructorCall = false);
	DllExport void setInitialItems(bool bScenario);
	DllExport void regenerateMap();
	DllExport void initDiplomacy();
	DllExport void update();
	DllExport void updateColoredPlots();
	DllExport void updateSelectionList();
	DllExport void updateTestEndTurn();
	DllExport void testExtendedGame();
	DllExport CvUnit* getPlotUnit(const CvPlot* pPlot, int iIndex);
	DllExport void getPlotUnits(const CvPlot *pPlot, std::vector<CvUnit *> &plotUnits);
	DllExport void cycleCities(bool bForward = true, bool bAdd = false);
	DllExport bool cyclePlotUnits(CvPlot* pPlot, bool bForward = true, bool bAuto = false, int iCount = -1);
	DllExport void selectionListMove(CvPlot* pPlot, bool bAlt, bool bShift, bool bCtrl);
	DllExport void selectionListGameNetMessage(int eMessage, int iData2 = -1, int iData3 = -1, int iData4 = -1, int iFlags = 0, bool bAlt = false, bool bShift = false);
	DllExport void selectedCitiesGameNetMessage(int eMessage, int iData2 = -1, int iData3 = -1, int iData4 = -1, bool bOption = false, bool bAlt = false, bool bShift = false, bool bCtrl = false);
	DllExport void cityPushOrder(CvCity* pCity, OrderTypes eOrder, int iData, bool bAlt = false, bool bShift = false, bool bCtrl = false);
	DllExport void selectUnit(CvUnit* pUnit, bool bClear, bool bToggle = false, bool bSound = false);
	DllExport void selectGroup(CvUnit* pUnit, bool bShift, bool bCtrl, bool bAlt);
	DllExport void selectAll(CvPlot* pPlot);
	DllExport bool canHandleAction(int iAction, CvPlot* pPlot = NULL, bool bTestVisible = false, bool bUseCache = false);
	DllExport void setupActionCache();
	DllExport void handleAction(int iAction);
	DllExport void doControl(ControlTypes eControl);
	DllExport void implementDeal(PlayerTypes eWho, PlayerTypes eOtherWho, CLinkList<TradeData>* pOurList, CLinkList<TradeData>* pTheirList, bool bForce = false);
	DllExport void getGlobeviewConfigurationParameters(TeamTypes eTeam, bool& bStarsVisible, bool& bWorldIsRound);
	DllExport TeamTypes getActiveTeam();
	DllExport CivilizationTypes getActiveCivilizationType();
	DllExport bool isNetworkMultiPlayer() const;
	DllExport bool isGameMultiPlayer() const;
	DllExport bool isTeamGame() const;
	DllExport void reviveActivePlayer();
	DllExport int getNumHumanPlayers();
	DllExport void incrementEndTurnMessagesSent();
	DllExport int getGameTurn();
	DllExport void getTurnTimerText(CvWString& szBuffer) const;
	DllExport int getTurnSlice() const;
	DllExport int getTurnSlicesRemaining() const;
	DllExport int countNumHumanGameTurnActive();
	DllExport void initScoreCalculation();
	DllExport void setAIAutoPlay(int iNewValue);
	DllExport void setInitialTime(unsigned int uiNewValue);
	DllExport bool isDebugMode() const;
	DllExport void toggleDebugMode();
	DllExport void updateDebugModeCache();
	DllExport bool isHotSeat() const;
	DllExport bool isPbem() const;
	DllExport bool isPitboss() const;
	DllExport bool isSimultaneousTeamTurns() const;
	DllExport bool isFinalInitialized() const;
	DllExport void setFinalInitialized(bool bNewValue);
	DllExport void setPbemTurnSent(bool bNewValue);
	DllExport bool getHotPbemBetweenTurns() const;
	DllExport PlayerTypes getActivePlayer() const;
	DllExport void setActivePlayer(PlayerTypes eNewValue, bool bForceHotSeat = false);
	DllExport void updateUnitEnemyGlow();
	DllExport PlayerTypes getPausePlayer();
	DllExport bool isPaused();
	DllExport void setPausePlayer(PlayerTypes eNewValue);
	DllExport int getBestLandUnitCombat();
	DllExport TeamTypes getWinner() const;
	DllExport VictoryTypes getVictory() const;
	DllExport GameStateTypes getGameState() const;
	DllExport void setGameState(GameStateTypes eNewValue);
	DllExport EraTypes getStartEra() const;
	DllExport int getPlayerScore(PlayerTypes ePlayer);
	DllExport bool isMPOption(MultiplayerOptionTypes eIndex) const;
	DllExport const CvWString & getName();
	DllExport int getIndexAfterLastDeal();
	DllExport CvDeal* getDeal(int iID);
	DllExport int calculateSyncChecksum(CvString* pLogString);
	DllExport int calculateOptionsChecksum();
	DllExport void setReplayInfo(CvReplayInfo* pReplay);
	DllExport void initEvents();
CvGameCoreDLL.h
#define DllExport   __declspec( dllexport )
CvGameCoreUtils.h
DllExport bool isLeaderCivMatch(LeaderHeadTypes eLeader, CivilizationTypes eCiv, bool bHuman);
DllExport bool isCardinalDirection(DirectionTypes eDirection);
DllExport DirectionTypes estimateDirection(const CvPlot* pFromPlot, const CvPlot* pToPlot);
DllExport float directionAngle(DirectionTypes eDirection);
DllExport CvCity* getCity(const IDInfo& city);
DllExport CvUnit* getUnit(const IDInfo& unit);
DllExport void setTradeItem(TradeData* pItem, TradeableItems eItemType, int iData1, const IDInfo* pTransport);
DllExport void clear(wchar* szString);
DllExport void clear(char* szString);
DllExport void clear(std::string& szString);
DllExport void clear(std::wstring& szString);
DllExport void safecpy(char * szDest, const char * szSource, int iMaxLen);
DllExport void safecpy(wchar * szDest, const wchar * szSource, int iMaxLen);
DllExport void safecpy(CvWString& szDest, const CvWString& szSource, int iMaxLen);
DllExport bool isEmpty(const char* szString);
DllExport bool isEmpty(const std::string& szStr);
DllExport bool isEmpty(const wchar* szString);
DllExport bool isEmpty(const std::wstring& szStr);
DllExport bool PUF_isVisibleDebug(const CvUnit* pUnit, int iData1, int iData2 = -1);
DllExport void boolsToString(const bool* pBools, int iNumBools, CvString* szOut);
DllExport void stringToBools(const char* szString, int* iNumBools, bool** ppBools);
CvGameTextMgr.h
	DllExport static CvGameTextMgr& GetInstance();
	DllExport CvGameTextMgr();
	DllExport virtual ~CvGameTextMgr();
	DllExport void Initialize();
	DllExport void DeInitialize();
	DllExport void Reset();
	DllExport int getCurrentLanguage();
	DllExport void setTimeStr(CvWString& szString, int iGameTurn, bool bSave);
	DllExport void setYearStr(CvWString& szString, int iGameTurn, bool bSave, CalendarTypes eCalendar, int iStartYear, GameSpeedTypes eSpeed);
	DllExport void setDateStr(CvWString& szString, int iGameTurn, bool bSave, CalendarTypes eCalendar, int iStartYear, GameSpeedTypes eSpeed);
	DllExport void setInterfaceTime(CvWString& szString, PlayerTypes ePlayer);
	DllExport void setGoldStr(CvWString& szString, PlayerTypes ePlayer);
	DllExport void setOOSSeeds(CvWString& szString, PlayerTypes ePlayer);
	DllExport void setNetStats(CvWString& szString, PlayerTypes ePlayer);
	DllExport void setMinimizePopupHelp(CvWString& szString, const CvPopupInfo & info);
	DllExport void setUnitHelp(CvWStringBuffer &szString, const CvUnit* pUnit, bool bOneLine = false, bool bShort = false);
	DllExport void setUnitPromotionHelp(CvWStringBuffer &szString, const CvUnit* pUnit);
	DllExport void setPlotListHelp(CvWStringBuffer &szString, const CvPlot* pPlot, bool bOneLine, bool bShort);
	DllExport bool setCombatPlotHelp(CvWStringBuffer &szString, CvPlot* pPlot);
	DllExport void setPlotHelp(CvWStringBuffer &szString, CvPlot* pPlot);
	DllExport void setCityBarHelp(CvWStringBuffer &szString, CvCity* pCity);
	DllExport void setScoreHelp(CvWStringBuffer &szString, PlayerTypes ePlayer);
	DllExport void setCitizenHelp(CvWStringBuffer &szString, const CvCity& kCity, const CvUnit& kUnit);
	DllExport void setEuropeYieldSoldHelp(CvWStringBuffer &szString, const CvPlayer& kPlayer, YieldTypes eYield, int iAmount, int iCommission);
	DllExport void setEuropeYieldBoughtHelp(CvWStringBuffer &szString, const CvPlayer& kPlayer, YieldTypes eYield, int iAmount);
	DllExport void parseTraits(CvWStringBuffer &szHelpString, TraitTypes eTrait, CivilizationTypes eCivilization = NO_CIVILIZATION, bool bDawnOfMan = false, bool bIndent = true);
	DllExport void parseLeaderTraits(CvWStringBuffer &szInfoText, LeaderHeadTypes eLeader = NO_LEADER, CivilizationTypes eCivilization = NO_CIVILIZATION, bool bDawnOfMan = false, bool bCivilopediaText = false);
	DllExport void parseLeaderShortTraits(CvWStringBuffer &szInfoText, LeaderHeadTypes eLeader);
	DllExport void parseCivShortTraits(CvWStringBuffer &szInfoText, CivilizationTypes eCiv);
	DllExport void parseCivInfos(CvWStringBuffer &szHelpString, CivilizationTypes eCivilization, bool bDawnOfMan = false, bool bLinks = true);
	DllExport void parseCivicInfo(CvWStringBuffer &szBuffer, CivicTypes eCivic, bool bCivilopediaText = false, bool bPlayerContext = false, bool bSkipName = false);
	DllExport void parsePlayerTraits(CvWStringBuffer &szBuffer, PlayerTypes ePlayer);
	DllExport void parseLeaderHeadHelp(CvWStringBuffer &szBuffer, PlayerTypes eThisPlayer, PlayerTypes eOtherPlayer);
	DllExport void parseLeaderLineHelp(CvWStringBuffer &szBuffer, PlayerTypes eThisPlayer, PlayerTypes eOtherPlayer);
	DllExport void parseGreatGeneralHelp(CvWStringBuffer &szBuffer, CvPlayer& kPlayer);
	DllExport void setBasicUnitHelp(CvWStringBuffer &szBuffer, UnitTypes eUnit, bool bCivilopediaText = false);
	DllExport void setUnitHelp(CvWStringBuffer &szBuffer, UnitTypes eUnit, bool bCivilopediaText = false, bool bStrategyText = false, CvCity* pCity = NULL);
	DllExport void setProfessionHelp(CvWStringBuffer &szBuffer, ProfessionTypes eProfession, bool bCivilopediaText = false, bool bStrategyText = false);
	DllExport void setBuildingHelp(CvWStringBuffer &szBuffer, BuildingTypes eBuilding, bool bCivilopediaText = false, bool bStrategyText = false, CvCity* pCity = NULL);
	DllExport void setFatherPointHelp(CvWStringBuffer &szBuffer, FatherPointTypes eFatherPointType);
	DllExport void setYieldChangeHelp(CvWStringBuffer &szBuffer, const CvWString& szStart, const CvWString& szSpace, const CvWString& szEnd, const int* piYieldChange, bool bPercent = false, bool bNewLine = true);
	DllExport void setBonusHelp(CvWStringBuffer &szBuffer, BonusTypes eBonus, bool bCivilopediaText = false);
	DllExport void setPromotionHelp(CvWStringBuffer &szBuffer, PromotionTypes ePromotion, bool bCivilopediaText = false);
	DllExport void setImprovementHelp(CvWStringBuffer &szBuffer, ImprovementTypes eImprovement, bool bCivilopediaText = false);
	DllExport void setTerrainHelp(CvWStringBuffer &szBuffer, TerrainTypes eTerrain, bool bCivilopediaText = false);
	DllExport void setYieldsHelp(CvWStringBuffer &szBuffer, YieldTypes eYield, bool bCivilopediaText = false);
	DllExport void setFeatureHelp(CvWStringBuffer &szBuffer, FeatureTypes eFeature, bool bCivilopediaText = false);
	DllExport void setProductionHelp(CvWStringBuffer &szBuffer, CvCity& city);
	DllExport void setYieldPriceHelp(CvWStringBuffer &szBuffer, PlayerTypes ePlayer, YieldTypes eYield);
	DllExport void setYieldHelp(CvWStringBuffer &szBuffer, CvCity& city, YieldTypes eYieldType);
	DllExport void setEventHelp(CvWStringBuffer& szBuffer, EventTypes eEvent, int iEventTriggeredId, PlayerTypes ePlayer);
	DllExport void setFatherHelp(CvWStringBuffer &szBuffer, FatherTypes eFather, bool bCivilopediaText);
	DllExport void buildHintsList(CvWStringBuffer& szBuffer);
	DllExport void buildBuildingRequiresString(CvWStringBuffer& szBuffer, BuildingTypes eBuilding, bool bCivilopediaText, const CvCity* pCity);
	DllExport void buildCityBillboardIconString( CvWStringBuffer& szBuffer, CvCity* pCity);
	DllExport void buildCityBillboardCityNameString( CvWStringBuffer& szBuffer, CvCity* pCity);
	DllExport void buildCityBillboardProductionString( CvWStringBuffer& szBuffer, CvCity* pCity);
	DllExport void buildCityBillboardCitySizeString( CvWStringBuffer& szBuffer, CvCity* pCity, const NiColorA& kColor);
	DllExport void getAttitudeString(CvWStringBuffer& szBuffer, PlayerTypes ePlayer, PlayerTypes eTargetPlayer);
	DllExport void getTradeString(CvWStringBuffer& szBuffer, const TradeData& tradeData, PlayerTypes ePlayer1, PlayerTypes ePlayer2);
	DllExport void getDealString(CvWStringBuffer& szString, CvDeal& deal, PlayerTypes ePlayerPerspective = NO_PLAYER);
	DllExport void getActiveDealsString(CvWStringBuffer& szString, PlayerTypes eThisPlayer, PlayerTypes eOtherPlayer);
	DllExport void getTradeScreenTitleIcon(CvString& szButton, CvWidgetDataStruct& widgetData, PlayerTypes ePlayer);
	DllExport void getTradeScreenIcons(std::vector< std::pair<CvString, CvWidgetDataStruct> >& aIconInfos, PlayerTypes ePlayer);
	DllExport void getTradeScreenHeader(CvWString& szHeader, PlayerTypes ePlayer, PlayerTypes eOtherPlayer, bool bAttitude, CvCity* pCity);
	DllExport void setResourceLayerInfo(ResourceLayerOptions eOption, CvWString& szName, CvString& szButton);
	DllExport void setUnitLayerInfo(UnitLayerOptionTypes eOption, CvWString& szName, CvString& szButton);
CvGlobals.h
	DllExport inline static CvGlobals& getInstance();
	DllExport void init();
	DllExport void uninit();
	DllExport CvDiplomacyScreen* getDiplomacyScreen();
	DllExport CMPDiplomacyScreen* getMPDiplomacyScreen();
	DllExport FMPIManager*& getFMPMgrPtr();
	DllExport CvPortal& getPortal();
	DllExport CvSetupData& getSetupData();
	DllExport CvInitCore& getInitCore();
	DllExport CvInitCore& getLoadedInitCore();
	DllExport CvInitCore& getIniInitCore();
	DllExport CvMessageCodeTranslator& getMessageCodes();
	DllExport CvStatsReporter& getStatsReporter();
	DllExport CvInterface& getInterface();
	DllExport CvInterface* getInterfacePtr();
	DllExport int getMaxCivPlayers() const;
	DllExport CvMap& getMap();
	DllExport CvGameAI& getGame();
	DllExport CvGameAI *getGamePointer();
	DllExport CvRandom& getASyncRand();
	DllExport CMessageQueue& getMessageQueue();
	DllExport CMessageQueue& getHotMessageQueue();
	DllExport CMessageControl& getMessageControl();
	DllExport CvDropMgr& getDropMgr();
	DllExport FAStar& getPathFinder();
	DllExport FAStar& getInterfacePathFinder();
	DllExport FAStar& getStepFinder();
	DllExport FAStar& getRouteFinder();
	DllExport FAStar& getBorderFinder();
	DllExport FAStar& getAreaFinder();
	DllExport std::vector<CvInterfaceModeInfo*>& getInterfaceModeInfo();
	DllExport CvInterfaceModeInfo& getInterfaceModeInfo(InterfaceModeTypes e);
	DllExport bool& getLogging();
	DllExport bool& getRandLogging();
	DllExport bool& getSynchLogging();
	DllExport bool& overwriteLogs();
	DllExport int* getPlotDirectionX();
	DllExport int* getPlotDirectionY();
	DllExport DirectionTypes getXYDirection(int i, int j);
	DllExport int getInfoTypeForString(const char* szType, bool hideAssert = false) const;			// returns the infos index, use this when searching for an info type string
	DllExport void setInfoTypeFromString(const char* szType, int idx);
	DllExport void infoTypeFromStringReset();
	DllExport void addToInfosVectors(void *infoVector);
	DllExport void infosReset();
	DllExport int getNumWorldInfos();
	DllExport CvWorldInfo& getWorldInfo(WorldSizeTypes e);
	DllExport int getNumClimateInfos();
	DllExport CvClimateInfo& getClimateInfo(ClimateTypes e);
	DllExport int getNumSeaLevelInfos();
	DllExport CvSeaLevelInfo& getSeaLevelInfo(SeaLevelTypes e);
	DllExport int getNumEuropeInfos();
	DllExport CvEuropeInfo& getEuropeInfo(EuropeTypes e);
	DllExport int getNumColorInfos();
	DllExport CvColorInfo& getColorInfo(ColorTypes e);
	DllExport int getNumPlayerColorInfos();
	DllExport CvPlayerColorInfo& getPlayerColorInfo(PlayerColorTypes e);
	DllExport int getNumHints();
	DllExport CvInfoBase& getHints(int i);
	DllExport CvMainMenuInfo& getMainMenus(int i);
	DllExport int getNumRouteModelInfos();
	DllExport CvRouteModelInfo& getRouteModelInfo(int i);
	DllExport int getNumRiverModelInfos();
	DllExport CvRiverModelInfo& getRiverModelInfo(int i);
	DllExport CvWaterPlaneInfo& getWaterPlaneInfo(int i);
	DllExport int getNumTerrainPlaneInfos();
	DllExport CvTerrainPlaneInfo& getTerrainPlaneInfo(int i);
	DllExport int getNumCameraOverlayInfos();
	DllExport CvCameraOverlayInfo& getCameraOverlayInfo(int i);
	DllExport CvAnimationPathInfo& getAnimationPathInfo(AnimationPathTypes e);
	DllExport CvAnimationCategoryInfo& getAnimationCategoryInfo(AnimationCategoryTypes e);
	DllExport CvEntityEventInfo& getEntityEventInfo(EntityEventTypes e);
	DllExport CvEffectInfo& getEffectInfo(int i);
	DllExport CvAttachableInfo& getAttachableInfo(int i);
	DllExport int getNumUnitFormationInfos();
	DllExport CvUnitFormationInfo& getUnitFormationInfo(int i);
	DllExport CvLandscapeInfo& getLandscapeInfo(int iIndex);
	DllExport int getActiveLandscapeID();
	DllExport void setActiveLandscapeID(int iLandscapeID);
	DllExport int getNumTerrainInfos();
	DllExport CvTerrainInfo& getTerrainInfo(TerrainTypes eTerrainNum);
	DllExport int getNumBonusInfos();
	DllExport std::vector<CvBonusInfo*>& getBonusInfo();
	DllExport CvBonusInfo& getBonusInfo(BonusTypes eBonusNum);
	DllExport int getNumFeatureInfos();
	DllExport CvFeatureInfo& getFeatureInfo(FeatureTypes eFeatureNum);
	DllExport int getNumCivilizationInfos();
	DllExport std::vector<CvCivilizationInfo*>& getCivilizationInfo();
	DllExport CvCivilizationInfo& getCivilizationInfo(CivilizationTypes eCivilizationNum);
	DllExport int getNumLeaderHeadInfos();
	DllExport std::vector<CvLeaderHeadInfo*>& getLeaderHeadInfo();
	DllExport CvLeaderHeadInfo& getLeaderHeadInfo(LeaderHeadTypes eLeaderHeadNum);
	DllExport std::vector<CvTraitInfo*>& getTraitInfo();
	DllExport	CvTraitInfo& getTraitInfo(TraitTypes eTraitNum);
	DllExport int getNumCursorInfos();
	DllExport	CvCursorInfo& getCursorInfo(CursorTypes eCursorNum);
	DllExport int getNumSlideShowInfos();
	DllExport	CvSlideShowInfo& getSlideShowInfo(int iIndex);
	DllExport int getNumSlideShowRandomInfos();
	DllExport	CvSlideShowRandomInfo& getSlideShowRandomInfo(int iIndex);
	DllExport int getNumWorldPickerInfos();
	DllExport	CvWorldPickerInfo& getWorldPickerInfo(int iIndex);
	DllExport int getNumUnitInfos();
	DllExport std::vector<CvUnitInfo*>& getUnitInfo();
	DllExport	CvUnitInfo& getUnitInfo(UnitTypes eUnitNum);
	DllExport	CvSpecialUnitInfo& getSpecialUnitInfo(SpecialUnitTypes eSpecialUnitNum);
	DllExport std::vector<CvFatherInfo*>& getFatherInfo();
	DllExport int getNumFatherPointInfos();
	DllExport CvFatherPointInfo& getFatherPointInfo(FatherPointTypes e);
	DllExport	CvInfoBase& getAttitudeInfo(AttitudeTypes eAttitudeNum);
	DllExport	CvInfoBase& getMemoryInfo(MemoryTypes eMemoryNum);
	DllExport	CvInfoBase& getFatherCategoryInfo(FatherCategoryTypes eFatherCategoryNum);
	DllExport	CvGameOptionInfo& getGameOptionInfo(GameOptionTypes eGameOptionNum);
	DllExport	CvMPOptionInfo& getMPOptionInfo(MultiplayerOptionTypes eMPOptionNum);
	DllExport	CvForceControlInfo& getForceControlInfo(ForceControlTypes eForceControlNum);
	DllExport	CvPlayerOptionInfo& getPlayerOptionInfo(PlayerOptionTypes ePlayerOptionNum);
	DllExport	CvGraphicOptionInfo& getGraphicOptionInfo(GraphicOptionTypes eGraphicOptionNum);
	DllExport	CvYieldInfo& getYieldInfo(YieldTypes eYieldNum);
	DllExport int getNumRouteInfos();
	DllExport	CvRouteInfo& getRouteInfo(RouteTypes eRouteNum);
	DllExport int getNumImprovementInfos();
	DllExport std::vector<CvImprovementInfo*>& getImprovementInfo();
	DllExport CvImprovementInfo& getImprovementInfo(ImprovementTypes eImprovementNum);
	DllExport CvBuildInfo& getBuildInfo(BuildTypes eBuildNum);
	DllExport int getNumHandicapInfos();
	DllExport std::vector<CvHandicapInfo*>& getHandicapInfo();
	DllExport CvHandicapInfo& getHandicapInfo(HandicapTypes eHandicapNum);
	DllExport int getNumGameSpeedInfos();
	DllExport CvGameSpeedInfo& getGameSpeedInfo(GameSpeedTypes eGameSpeedNum);
	DllExport int getNumTurnTimerInfos();
	DllExport CvTurnTimerInfo& getTurnTimerInfo(TurnTimerTypes eTurnTimerNum);
	DllExport int getNumBuildingClassInfos();
	DllExport int getNumBuildingInfos();
	DllExport std::vector<CvBuildingInfo*>& getBuildingInfo();
	DllExport CvBuildingInfo& getBuildingInfo(BuildingTypes eBuildingNum);
	DllExport int getNumSpecialBuildingInfos();
	DllExport CvSpecialBuildingInfo& getSpecialBuildingInfo(SpecialBuildingTypes eSpecialBuildingNum);
	DllExport int getNumUnitClassInfos();
	DllExport int getNumActionInfos();
	DllExport CvActionInfo& getActionInfo(int i);
	DllExport CvMissionInfo& getMissionInfo(MissionTypes eMissionNum);
	DllExport CvCommandInfo& getCommandInfo(CommandTypes eCommandNum);
	DllExport int getNumPromotionInfos();
	DllExport std::vector<CvPromotionInfo*>& getPromotionInfo();
	DllExport CvPromotionInfo& getPromotionInfo(PromotionTypes ePromotionNum);
	DllExport std::vector<CvProfessionInfo*>& getProfessionInfo();
	DllExport int getNumCivicOptionInfos();
	DllExport std::vector<CvCivicInfo*>& getCivicInfo();
	DllExport std::vector<CvDiplomacyInfo*>& getDiplomacyInfo();
	DllExport	CvDiplomacyInfo& getDiplomacyInfo(int iDiplomacyNum);
	DllExport int getNumEraInfos();
	DllExport	CvEraInfo& getEraInfo(EraTypes eEraNum);
	DllExport int getNumHurryInfos();
	DllExport	CvHurryInfo& getHurryInfo(HurryTypes eHurryNum);
	DllExport	CvEmphasizeInfo& getEmphasizeInfo(EmphasizeTypes eEmphasizeNum);
	DllExport	CvCultureLevelInfo& getCultureLevelInfo(CultureLevelTypes eCultureLevelNum);
	DllExport int getNumVictoryInfos();
	DllExport	CvVictoryInfo& getVictoryInfo(VictoryTypes eVictoryNum);
	DllExport std::vector<CvEventTriggerInfo*>& getEventTriggerInfo();
	DllExport std::vector<CvEventInfo*>& getEventInfo();
	DllExport int getNUM_ENGINE_DIRTY_BITS() const;
	DllExport int getNUM_INTERFACE_DIRTY_BITS() const;
	DllExport int getNUM_YIELD_TYPES() const;
	DllExport int getNUM_FORCECONTROL_TYPES() const;
	DllExport int getNUM_INFOBAR_TYPES() const;
	DllExport int getNUM_HEALTHBAR_TYPES() const;
	DllExport int getNUM_LEADERANIM_TYPES() const;
	DllExport CvString& getEntityEventTypes(EntityEventTypes e);
	DllExport int& getNumArtStyleTypes();
	DllExport CvString& getArtStyleTypes(ArtStyleTypes e);
	DllExport int& getNumFootstepAudioTypes();
	DllExport CvString& getFootstepAudioTags(int i);
	DllExport FVariableSystem* getDefinesVarSystem();
	DllExport int getDefineINT( const char * szName ) const;
	DllExport float getDefineFLOAT( const char * szName ) const;
	DllExport const char * getDefineSTRING( const char * szName ) const;
	DllExport void setDefineINT( const char * szName, int iValue );
	DllExport void setDefineFLOAT( const char * szName, float fValue );
	DllExport void setDefineSTRING( const char * szName, const char * szValue );
	DllExport int getMAX_PLOT_LIST_ROWS();
	DllExport int getUNIT_MULTISELECT_MAX();
	DllExport int getEVENT_MESSAGE_TIME();
	DllExport float getCAMERA_MIN_YAW();
	DllExport float getCAMERA_MAX_YAW();
	DllExport float getCAMERA_FAR_CLIP_Z_HEIGHT();
	DllExport float getCAMERA_MAX_TRAVEL_DISTANCE();
	DllExport float getCAMERA_START_DISTANCE();
	DllExport float getPLOT_SIZE();
	DllExport float getCAMERA_SPECIAL_PITCH();
	DllExport float getCAMERA_MAX_TURN_OFFSET();
	DllExport float getCAMERA_MIN_DISTANCE();
	DllExport float getCAMERA_UPPER_PITCH();
	DllExport float getCAMERA_LOWER_PITCH();
	DllExport float getFIELD_OF_VIEW();
	DllExport float getUNIT_MULTISELECT_DISTANCE();
	DllExport int getUSE_FINISH_TEXT_CALLBACK();
	DllExport int getUSE_ON_UNIT_SET_XY_CALLBACK();
	DllExport int getUSE_ON_UNIT_SELECTED_CALLBACK();
	DllExport int getUSE_ON_MISSIONARY_CONVERTED_UNIT_CALLBACK();
	DllExport int getUSE_ON_UPDATE_CALLBACK();
	DllExport int getUSE_ON_UNIT_CREATED_CALLBACK();
	DllExport int getUSE_ON_UNIT_LOST_CALLBACK();
	DllExport int getMAX_CIV_PLAYERS();
	DllExport void setDLLIFace(CvDLLUtilityIFaceBase* pDll);
	DllExport CvDLLUtilityIFaceBase* getDLLIFaceNonInl();
	DllExport bool IsGraphicsInitialized() const;
	DllExport void SetGraphicsInitialized(bool bVal);
	DllExport void setInterface(CvInterface* pVal);
	DllExport void setDiplomacyScreen(CvDiplomacyScreen* pVal);
	DllExport void setMPDiplomacyScreen(CMPDiplomacyScreen* pVal);
	DllExport void setMessageQueue(CMessageQueue* pVal);
	DllExport void setHotJoinMessageQueue(CMessageQueue* pVal);
	DllExport void setMessageControl(CMessageControl* pVal);
	DllExport void setSetupData(CvSetupData* pVal);
	DllExport void setMessageCodeTranslator(CvMessageCodeTranslator* pVal);
	DllExport void setDropMgr(CvDropMgr* pVal);
	DllExport void setPortal(CvPortal* pVal);
	DllExport void setStatsReport(CvStatsReporter* pVal);
	DllExport void setPathFinder(FAStar* pVal);
	DllExport void setInterfacePathFinder(FAStar* pVal);
	DllExport void setStepFinder(FAStar* pVal);
	DllExport void setRouteFinder(FAStar* pVal);
	DllExport void setBorderFinder(FAStar* pVal);
	DllExport void setAreaFinder(FAStar* pVal);
	DllExport int getNumDirections() const;
	DllExport int getNumResourceLayers() const;
	DllExport int getNumUnitLayerOptionTypes() const;
	DllExport int getNumGameOptions() const;
	DllExport int getNumMPOptions() const;
	DllExport int getNumSpecialOptions() const;
	DllExport int getNumGraphicOptions() const;
	DllExport int getNumTradeableItems() const;
	DllExport int getNumBasicItems() const;
	DllExport int getNumTradeableHeadings() const;
	DllExport int getNumCommandInfos() const;
	DllExport int getNumControlInfos() const;
	DllExport int getNumMissionInfos() const;
	DllExport int getNumPlayerOptionInfos() const;
	DllExport int getMaxNumSymbols() const;
	DllExport int getNumGraphicLevels() const;
CvInfos.h
	DllExport virtual ~CvInfoBase();
	DllExport bool isGraphicalOnly() const;
	DllExport const char* getType() const;
	DllExport const wchar* getTextKeyWide() const;
	DllExport const wchar* getDescription(uint uiForm = 0) const;
	DllExport const wchar* getText() const;
	DllExport const wchar* getHelp() const;
	DllExport float getScale() const;
	DllExport float getInterfaceScale() const;
	DllExport CvPromotionInfo();
	DllExport CvProfessionInfo();
	DllExport int getTime() const;
	DllExport bool isTarget() const;
	DllExport EntityEventTypes getEntityEvent() const;
	DllExport bool getAll() const;
	DllExport bool isVisible() const;
	DllExport ActionSubTypes getSubType() const;
	DllExport int getHotKeyVal() const;
	DllExport int getHotKeyPriority() const;
	DllExport int getHotKeyValAlt() const;
	DllExport int getHotKeyPriorityAlt() const;
	DllExport bool isAltDown() const;
	DllExport bool isShiftDown() const;
	DllExport bool isCtrlDown() const;
	DllExport bool isAltDownAlt() const;
	DllExport bool isShiftDownAlt() const;
	DllExport bool isCtrlDownAlt() const;
	DllExport CvUnitInfo();
	DllExport int getUnitClassType() const;
	DllExport int getDomainType() const;
	DllExport int getGroupSize(int iProfession) const;									 // the initial number of individuals in the unit group
	DllExport int getGroupDefinitions(int iProfession) const;					 // the number of UnitMeshGroups for this unit
	DllExport bool isMechUnit() const;
	DllExport float getUnitMaxSpeed(int iProfession) const;
	DllExport float getUnitPadTime(int iProfession) const;
	DllExport int getUnitGroupRequired(int i, int iProfession) const;
	DllExport const char* getFormationType() const;
	DllExport const CvArtInfoUnit* getArtInfo(int i, int iProfession) const;
	DllExport int getDefaultProfession() const;
	DllExport CvUnitFormationInfo();
	DllExport const char* getFormationType() const;
	DllExport const std::vector<EntityEventTypes> & getEventTypes() const;
	DllExport int getNumUnitEntries() const;
	DllExport const CvUnitEntry &getUnitEntry(int index) const;
	DllExport void addUnitEntry(const CvUnitEntry &unitEntry);
	DllExport const CvUnitEntry &getGreatUnitEntry(int index) const;
	DllExport CvCivicInfo();
	DllExport CvDiplomacyInfo();
	DllExport CvBuildingInfo();
	DllExport int getBuildingClassType() const;
	DllExport int getFreeStartEra() const;
	DllExport float getVisibilityPriority() const;
	DllExport bool isWater() const;
	DllExport const CvArtInfoBuilding* getArtInfo() const;
	DllExport void setChar(int i);
	DllExport int getFontButtonIndex() const;
	DllExport const char* getModelFile() const;
	DllExport const char* getBorderFile() const;
	DllExport int getTextureIndex() const;
	DllExport const char* getDeltaString() const;
	DllExport const char* getConnectString() const;
	DllExport const char* getRotateString() const;
	DllExport RouteTypes getRouteType() const;				// The route type
	DllExport const char* getModelFile() const;
	DllExport const char* getConnectString() const;
	DllExport const char* getModelConnectString() const;
	DllExport const char* getRotateString() const;
	DllExport CvCivilizationInfo();
	DllExport int getDefaultPlayerColor() const;
	DllExport int getSelectionSoundScriptId() const;
	DllExport int getMissionaryChar() const;
	DllExport void setMissionaryChar(int iChar);
	DllExport bool isAIPlayable() const;
	DllExport bool isPlayable() const;
	DllExport bool isOpenBorders() const;
	DllExport bool isEurope() const;
	DllExport bool isNative() const;
	DllExport const wchar* getShortDescription(uint uiForm = 0);
	DllExport const wchar* getAdjective(uint uiForm = 0);
	DllExport const char* getFlagTexture() const;
	DllExport int getCivilizationBuildings(int i) const;
	DllExport int getCivilizationUnits(int i) const;
	DllExport bool isLeaders(int i) const;
	DllExport const CvArtInfoCivilization* getArtInfo() const;
	DllExport int getDerivativeCiv() const;
	DllExport bool getDefault() const;
	DllExport bool isPermanent() const;
	DllExport CvHandicapInfo();
	DllExport int getEntityEvent() const;
	DllExport int getMissionType() const;
	DllExport CvImprovementInfo();
	DllExport bool isRequiresRiverSide() const;
	DllExport bool isWater() const;
	DllExport bool useLSystem() const;
	DllExport int getWorldSoundscapeScriptId() const;
	DllExport bool isImprovementBonusMakesValid(int i) const;
	DllExport const CvArtInfoImprovement* getArtInfo() const;
	DllExport CvBonusInfo();
	DllExport int getChar() const;
	DllExport void setChar(int i);
	DllExport bool useLSystem() const;
	DllExport bool isTerrain(int i) const;
	DllExport bool isFeature(int i) const;
	DllExport const CvArtInfoBonus* getArtInfo() const;
	DllExport int getWorldSoundscapeScriptId() const;
	DllExport int get3DAudioScriptFootstepIndex(int i) const;
	DllExport const CvArtInfoFeature* getArtInfo() const;
	DllExport int getChar() const;
	DllExport void setChar(int i);
	DllExport int getColorType() const;
	DllExport int getTextureIndex() const;
	DllExport int getWaterTextureIndex() const;
	DllExport bool isWater() const;
	DllExport const char* getArtDefineTag() const;
	DllExport int getWorldSoundscapeScriptId() const;
	DllExport int get3DAudioScriptFootstepIndex(int i) const;
	DllExport const CvArtInfoTerrain* getArtInfo() const;
	DllExport int getCursorIndex() const;
	DllExport int getMissionType() const;
	DllExport bool getGotoPlot() const;
	DllExport bool getHighlightPlot() const;
	DllExport CvLeaderHeadInfo();
	DllExport int getDiploPeaceMusicScriptIds(int i) const;
	DllExport int getDiploWarMusicScriptIds(int i) const;
	DllExport const CvArtInfoLeaderhead* getArtInfo() const;
	DllExport int getDefaultPlayers() const;
	DllExport int getDefaultNativePlayers() const;
	DllExport CvTraitInfo();
	DllExport const char* getPath();
	DllExport const char* getPath();
	DllExport const char* getTransitionType();
	DllExport float getStartTime();
	DllExport const char* getPath();
	DllExport const char* getMapName();
	DllExport const char* getModelFile();
	DllExport int getNumSizes();
	DllExport float getSize(int index);
	DllExport int getNumClimates();
	DllExport const char* getClimatePath(int index);
	DllExport int getNumWaterLevelDecals();
	DllExport const char* getWaterLevelDecalPath(int index);
	DllExport int getNumWaterLevelGloss();
	DllExport const char* getWaterLevelGlossPath(int index);
		DllExport int getPathCategory( int i );
		DllExport int getNumPathDefinitions();
		DllExport CvAnimationPathDefinition * getPath( );
		DllExport bool isMissionPath() const;
		DllExport int getCategoryBaseID( );
		DllExport int getCategoryDefaultTo( );
		DllExport AnimationPathTypes getAnimationPathType(int iIndex = 0) const;
		DllExport EffectTypes getEffectType(int iIndex = 0) const;
	DllExport const char* getPath() const;
	DllExport const char* getNIF() const;
	DllExport const char* getKFM() const;
	DllExport bool getActAsRanged() const;
	DllExport int getDamageStates() const;
	DllExport const char* getTrailTexture() const;
	DllExport float getTrailWidth() const;
	DllExport float getTrailLength() const;
	DllExport float getTrailTaper() const;
	DllExport float getTrailFadeStarTime() const;
	DllExport float getTrailFadeFalloff() const;
	DllExport float getBattleDistance() const;
	DllExport float getRangedDeathTime() const;
	DllExport float getExchangeAngle() const;
	DllExport bool getCombatExempt() const;
	DllExport float getBankRate() const;
	DllExport int getRunLoopSoundTag() const;
	DllExport int getRunEndSoundTag() const;
	DllExport int getSelectionSoundScriptId() const;
	DllExport const char* getLSystemName() const;
	DllExport int getFontButtonIndex() const;
	DllExport const char* getBackgroundKFM() const;
	DllExport int getFontButtonIndex() const;
	DllExport bool isShadowCastor() const;
	DllExport bool isRefractionCastor() const;
	DllExport const char* getBaseTexture();
	DllExport const char* getGridTexture();
	DllExport const char* getDetailTexture();
	DllExport int getLayerOrder() const;
	DllExport TerrainGroupTypes getTerrainGroup() const;
	DllExport CvTextureBlendSlotList &getBlendList(int blendMask);
	DllExport bool isAnimated() const;
	DllExport TileArtTypes getTileArtType() const;
	DllExport const FeatureVariety &getVariety(int index) const;
	DllExport int getNumVarieties() const;
	DllExport int getSoundtrackSpace() const;
	DllExport int getNumSoundtracks() const;
	DllExport bool isFirstSoundtrackFirst() const;
	DllExport int getSoundtracks(int i) const;
	DllExport int getCitySoundscapeSciptId(int i) const;
	DllExport const NiColorA& getColor() const;
	DllExport int getColorTypePrimary() const;
	DllExport int getColorTypeSecondary() const;
		DllExport int getPlotVertsWide() const;
		DllExport int getPlotVertsHigh() const;
		DllExport int getPlotsPerCellX() const;
		DllExport int getPlotsPerCellY() const;
		DllExport int getCellVertsWide() const;
		DllExport int getCellVertsHigh() const;
		DllExport int getWaterHeight() const;
		DllExport float getTextureScaleX() const;
		DllExport float getTextureScaleY() const;
		DllExport float getZScale() const;
		DllExport float getPeakScale() const;
		DllExport float getHillScale() const;
		DllExport const char* getEnvironmentTexture();
	DllExport CvGameText();
	DllExport int getNumLanguages() const; // not static for Python access
	DllExport void setNumLanguages(int iNum); // not static for Python access
	DllExport const char* getPath() const { return m_szPath; }
	DllExport const char* getPath() const { return m_szPath; }
	DllExport bool getDefault() const;
	DllExport bool getVisible() const;
	DllExport bool getDefault() const;
	DllExport bool getDefault() const;
	DllExport CvEventTriggerInfo();
	DllExport CvEventInfo();
	DllExport std::string getScene() const;
	DllExport std::string getSoundtrack() const;
	DllExport std::string getLoading() const;
	DllExport std::string getLoadingSlideshow() const;
	DllExport CvFatherInfo();
	DllExport int getChar() const;
	DllExport void setChar(int i);
	DllExport int getFontButtonIndex() const;
CvInfoWater.h
	DllExport CvWaterPlaneInfo();
	DllExport virtual ~CvWaterPlaneInfo();
	DllExport float getMaterialAlpha() const;				// The water plane's material alpha
	DllExport float getTextureScaling() const;				// The water plane's texture scale
	DllExport float getTextureScrollRateU() const;			// The water plane's texture scroll rate in U
	DllExport float getTextureScrollRateV() const;			// The water plane's texture scroll rate in V
	DllExport char const* getBaseTexture() const;
	DllExport char const* getNormalTexture() const;
	DllExport char const* getTransitionTexture() const;
	DllExport char const* getEnvironmentTexture() const;
	DllExport char const* getGridTexture() const;
	DllExport bool read(CvXMLLoadUtility*);
	DllExport CvTerrainPlaneInfo();
	DllExport virtual ~CvTerrainPlaneInfo();
	DllExport bool isVisible() const;				// The terrain plane's material alpha
	DllExport bool isGroundPlane() const;				// The terrain plane's material alpha
	DllExport bool isCitySelection() const;				// The terrain plane's material alpha
	DllExport float getMaterialAlpha() const;				// The terrain plane's material alpha
	DllExport float getCloseAlpha() const;				// The terrain plane's material alpha
	DllExport float getTextureScalingU() const;				// The terrain plane's texture scale
	DllExport float getTextureScalingV() const;				// The terrain plane's texture scale
	DllExport float getTextureScrollRateU() const;			// The terrain plane's texture scroll rate in U
	DllExport float getTextureScrollRateV() const;			// The terrain plane's texture scroll rate in V
	DllExport float getZHeight() const;						// The terrain plane's z height in world units
	DllExport FogTypes getFogType() const;
	DllExport char const* getBaseTexture() const;
	DllExport void setBaseTexture(char const* szVal);		// The filename of the base texture
	DllExport bool read(CvXMLLoadUtility*);
	DllExport CvCameraOverlayInfo();
	DllExport virtual ~CvCameraOverlayInfo();
	DllExport bool isVisible() const;				// The terrain plane's material alpha
	DllExport CameraOverlayTypes getCameraOverlayType() const;
	DllExport char const* getBaseTexture() const;
	DllExport void setBaseTexture(char const* szVal);		// The filename of the base texture
	DllExport bool read(CvXMLLoadUtility*);
CvInitCore.h
	DllExport void init(GameMode eMode);
	DllExport bool getHuman(PlayerTypes eID) const;
	DllExport int getNumDefinedPlayers() const;
	DllExport bool getMultiplayer() const;
	DllExport bool getNewGame() const;
	DllExport bool getSavedGame() const;
	DllExport bool getScenario() const;
	DllExport bool getGameMultiplayer() const { return (getMultiplayer() || getPitboss() || getPbem() || getHotseat()); }
	DllExport bool getPitboss() const;
	DllExport bool getHotseat() const;
	DllExport bool getPbem() const;
	DllExport bool getSlotVacant(PlayerTypes eID) const;
	DllExport PlayerTypes getAvailableSlot();
	DllExport void reassignPlayer(PlayerTypes eOldID, PlayerTypes eNewID);
	DllExport void closeInactiveSlots();
	DllExport void reopenInactiveSlots();
	DllExport void resetGame(CvInitCore * pSource, bool bClear = true, bool bSaveGameType = false);
	DllExport void resetPlayers();
	DllExport void resetPlayers(CvInitCore * pSource, bool bClear = true, bool bSaveSlotInfo = false);
	DllExport void resetPlayer(PlayerTypes eID, CvInitCore * pSource, bool bClear = true, bool bSaveSlotInfo = false);
	DllExport void setGameName(const CvWString & szGameName)	{ m_szGameName = szGameName; }
	DllExport void setGamePassword(const CvWString & szGamePassword)	{ m_szGamePassword = szGamePassword; }
	DllExport void setAdminPassword(const CvWString & szAdminPassword, bool bEncrypt = true);
	DllExport CvWString getMapScriptName() const;
	DllExport void setMapScriptName(const CvWString & szMapScriptName);
	DllExport bool getWBMapScript() const;
	DllExport void setWorldSize(const CvWString & szWorldSize);
	DllExport const CvWString & getWorldSizeKey(CvWString & szBuffer) const;
	DllExport void setClimate(const CvWString & szClimate);
	DllExport const CvWString & getClimateKey(CvWString & szBuffer) const;
	DllExport void setSeaLevel(const CvWString & szSeaLevel);
	DllExport const CvWString & getSeaLevelKey(CvWString & szBuffer) const;
	DllExport void setEra(const CvWString & szEra);
	DllExport const CvWString & getEraKey(CvWString & szBuffer) const;
	DllExport void setGameSpeed(const CvWString & szGameSpeed);
	DllExport const CvWString & getGameSpeedKey(CvWString & szBuffer) const;
	DllExport const CustomMapOptionTypes * getCustomMapOptions() const	{ return m_aeCustomMapOptions; }
	DllExport void setCustomMapOptions(int iNumCustomMapOptions, const CustomMapOptionTypes * aeCustomMapOptions);
	DllExport CustomMapOptionTypes getCustomMapOption(int iOptionID) const;
	DllExport void setCustomMapOption(int iOptionID, CustomMapOptionTypes eCustomMapOption);
	DllExport int getNumVictories() const	{ return m_iNumVictories; }
	DllExport const bool * getVictories() const	{ return m_abVictories; }
	DllExport void setVictories(int iNumVictories, const bool * abVictories);
	DllExport bool getVictory(VictoryTypes eVictoryID) const;
	DllExport void setVictory(VictoryTypes eVictoryID, bool bVictory);
	DllExport bool getOption(GameOptionTypes eIndex) const;
	DllExport void setOption(GameOptionTypes eIndex, bool bOption);
	DllExport bool getMPOption(MultiplayerOptionTypes eIndex) const;
	DllExport void setMPOption(MultiplayerOptionTypes eIndex, bool bMPOption);
	DllExport bool getForceControl(ForceControlTypes eIndex) const;
	DllExport void setForceControl(ForceControlTypes eIndex, bool bForceControl);
	DllExport int getPitbossTurnTime() const	{ return m_iPitbossTurnTime; }
	DllExport void setPitbossTurnTime(int iPitbossTurnTime)	{ m_iPitbossTurnTime = iPitbossTurnTime; }
	DllExport unsigned int getSyncRandSeed() const	{ return m_uiSyncRandSeed; }
	DllExport void setSyncRandSeed(unsigned int uiSyncRandSeed)	{ m_uiSyncRandSeed = uiSyncRandSeed; }
	DllExport unsigned int getMapRandSeed() const	{ return m_uiMapRandSeed; }
	DllExport void setMapRandSeed(unsigned int uiMapRandSeed)	{ m_uiMapRandSeed = uiMapRandSeed; }
	DllExport void setActivePlayer(PlayerTypes eActivePlayer);
	DllExport GameType getType() const	{ return m_eType; }
	DllExport void setType(GameType eType);
	DllExport void setType(const CvWString & szType);
	DllExport void setMode(GameMode eMode);
	DllExport const CvWString & getLeaderName(PlayerTypes eID, uint uiForm = 0) const;
	DllExport void setLeaderName(PlayerTypes eID, const CvWString & szLeaderName);
	DllExport const CvWString & getLeaderNameKey(PlayerTypes eID) const;
	DllExport const CvWString & getCivDescription(PlayerTypes eID, uint uiForm = 0) const;
	DllExport void setCivDescription(PlayerTypes eID, const CvWString & szCivDescription);
	DllExport const CvWString & getCivDescriptionKey(PlayerTypes eID) const;
	DllExport const CvWString & getCivShortDesc(PlayerTypes eID, uint uiForm = 0) const;
	DllExport void setCivShortDesc(PlayerTypes eID, const CvWString & szCivShortDesc);
	DllExport const CvWString & getCivShortDescKey(PlayerTypes eID) const;
	DllExport const CvWString & getCivAdjective(PlayerTypes eID, uint uiForm = 0) const;
	DllExport void setCivAdjective(PlayerTypes eID, const CvWString & szCivAdjective);
	DllExport const CvWString & getCivAdjectiveKey(PlayerTypes eID) const;
	DllExport const CvWString & getCivPassword(PlayerTypes eID) const;
	DllExport void setCivPassword(PlayerTypes eID, const CvWString & szCivPassword, bool bEncrypt = true);
	DllExport const CvString & getEmail(PlayerTypes eID) const;
	DllExport void setEmail(PlayerTypes eID, const CvString & szEmail);
	DllExport const CvString & getSmtpHost(PlayerTypes eID) const;
	DllExport void setSmtpHost(PlayerTypes eID, const CvString & szHost);
	DllExport CivilizationTypes getCiv(PlayerTypes eID) const;
	DllExport void setCiv(PlayerTypes eID, CivilizationTypes eCiv);
	DllExport LeaderHeadTypes getLeader(PlayerTypes eID) const;
	DllExport void setLeader(PlayerTypes eID, LeaderHeadTypes eLeader);
	DllExport TeamTypes getTeam(PlayerTypes eID) const;
	DllExport void setTeam(PlayerTypes eID, TeamTypes eTeam);
	DllExport HandicapTypes getHandicap(PlayerTypes eID) const;
	DllExport void setHandicap(PlayerTypes eID, HandicapTypes eHandicap);
	DllExport PlayerColorTypes getColor(PlayerTypes eID) const;
	DllExport void setColor(PlayerTypes eID, PlayerColorTypes eColor);
	DllExport ArtStyleTypes getArtStyle(PlayerTypes eID) const;
	DllExport void setArtStyle(PlayerTypes eID, ArtStyleTypes eArtStyle);
	DllExport SlotStatus getSlotStatus(PlayerTypes eID) const;
	DllExport void setSlotStatus(PlayerTypes eID, SlotStatus eSlotStatus);
	DllExport SlotClaim getSlotClaim(PlayerTypes eID) const;
	DllExport void setSlotClaim(PlayerTypes eID, SlotClaim eSlotClaim);
	DllExport bool getPlayableCiv(PlayerTypes eID) const;
	DllExport void setPlayableCiv(PlayerTypes eID, bool bPlayableCiv);
	DllExport bool getMinorNationCiv(PlayerTypes eID) const;
	DllExport void setMinorNationCiv(PlayerTypes eID, bool bMinorNationCiv);
	DllExport int getNetID(PlayerTypes eID) const;
	DllExport void setNetID(PlayerTypes eID, int iNetID);
	DllExport bool getReady(PlayerTypes eID) const;
	DllExport void setReady(PlayerTypes eID, bool bReady);
	DllExport const CvString & getPythonCheck(PlayerTypes eID) const;
	DllExport void setPythonCheck(PlayerTypes eID, const CvString & iPythonCheck);
	DllExport const CvString & getXMLCheck(PlayerTypes eID) const;
	DllExport void setXMLCheck(PlayerTypes eID, const CvString & iXMLCheck);
	DllExport void resetAdvancedStartPoints();
	DllExport int getMaxEuropePlayers() const;
CvMap.h
	DllExport void init(CvMapInitData* pInitData=NULL);
	DllExport void setupGraphical();
	DllExport void reset(CvMapInitData* pInitData);
	DllExport void erasePlots();
	DllExport void updateFlagSymbols();
	DllExport void updateFog();
	DllExport void updateSymbolVisibility();
	DllExport void updateMinimapColor();
	DllExport void updateCenterUnit();
	DllExport CvCity* findCity(int iX, int iY, PlayerTypes eOwner = NO_PLAYER, TeamTypes eTeam = NO_TEAM, bool bSameArea = true, bool bCoastalOnly = false, TeamTypes eTeamAtWarWith = NO_TEAM, DirectionTypes eDirection = NO_DIRECTION, CvCity* pSkipCity = NULL);
	DllExport bool isPlot(int iX, int iY) const;
	DllExport int numPlots() const;
	DllExport int plotNum(int iX, int iY) const;
	DllExport float plotXToPointX(int iX);
	DllExport float plotYToPointY(int iY);
	DllExport int getGridWidth() const;
	DllExport int getGridHeight() const;
	DllExport bool isWrapX();
	DllExport bool isWrapY();
	DllExport bool isWrap();
	DllExport WorldSizeTypes getWorldSize();
	DllExport CvPlot* plotByIndex(int iIndex) const;
	DllExport CvPlot* plot(int iX, int iY) const;
	DllExport CvPlot* pointToPlot(float fX, float fY);
CvMapGenerator.h
	DllExport static CvMapGenerator& GetInstance();
	DllExport static void FreeInstance() { SAFE_DELETE(m_pInst); }
	DllExport void addGameElements();
	DllExport void addRivers();
	DllExport void addFeatures();
	DllExport void addBonuses();
	DllExport void addGoodies();
	DllExport void eraseRivers();
	DllExport void eraseFeatures();
	DllExport void eraseBonuses();
	DllExport void eraseGoodies();
	DllExport void eraseEurope();
	DllExport void generateRandomMap();
CvPlayer.h
	DllExport void init(PlayerTypes eID);
	DllExport void setupGraphical();
	DllExport void reset(PlayerTypes eID = NO_PLAYER, bool bConstructorCall = false);
	DllExport CvUnit* initUnit(UnitTypes eUnit, ProfessionTypes eProfession, int iX, int iY, UnitAITypes eUnitAI = NO_UNITAI, DirectionTypes eFacingDirection = NO_DIRECTION, int iYieldStored = 0);
	DllExport bool isHuman() const;
	DllExport void updateHuman();
	DllExport const wchar* getName(uint uiForm = 0) const;
	DllExport const wchar* getNameKey() const;
	DllExport const wchar* getCivilizationDescription(uint uiForm = 0) const;
	DllExport const wchar* getCivilizationShortDescription(uint uiForm = 0) const;
	DllExport const wchar* getCivilizationAdjective(uint uiForm = 0) const;
	DllExport const char* getFlagDecal() const;
	DllExport bool isWhiteFlag() const;
	DllExport bool isInvertFlag() const;
	DllExport const CvWString getWorstEnemyName() const;
	DllExport ArtStyleTypes getArtStyleType() const;
	DllExport char const* getUnitButton(UnitTypes eUnit) const;
	DllExport bool hasBusyUnit() const;
	DllExport bool canContact(PlayerTypes ePlayer) const;
	DllExport void handleDiploEvent(DiploEventTypes eDiploEvent, PlayerTypes ePlayer, int iData1, int iData2);
	DllExport bool canTradeItem(PlayerTypes eWhoTo, TradeData item, bool bTestDenial = false) const;
	DllExport DenialTypes getTradeDenial(PlayerTypes eWhoTo, TradeData item) const;
	DllExport int getGold() const;
	DllExport void setGold(int iNewValue);
	DllExport void changeGold(int iChange);
	DllExport int getAdvancedStartPoints() const;
	DllExport void doAdvancedStartAction(AdvancedStartActionTypes eAction, int iX, int iY, int iData, bool bAdd);
	DllExport int getAdvancedStartUnitCost(UnitTypes eUnit, bool bAdd, CvPlot* pPlot = NULL);
	DllExport int getAdvancedStartCityCost(bool bAdd, CvPlot* pPlot = NULL);
	DllExport int getAdvancedStartPopCost(bool bAdd, CvCity* pCity = NULL);
	DllExport int getAdvancedStartCultureCost(bool bAdd, CvCity* pCity = NULL);
	DllExport int getAdvancedStartBuildingCost(BuildingTypes eBuilding, bool bAdd, CvCity* pCity = NULL);
	DllExport int getAdvancedStartImprovementCost(ImprovementTypes eImprovement, bool bAdd, CvPlot* pPlot = NULL);
	DllExport int getAdvancedStartRouteCost(RouteTypes eRoute, bool bAdd, CvPlot* pPlot = NULL);
	DllExport int getAdvancedStartVisibilityCost(bool bAdd, CvPlot* pPlot = NULL);
	DllExport CvCity* getPrimaryCity() const;
	DllExport int getNetID() const;
	DllExport void setNetID(int iNetID);
	DllExport void setStartTime(uint uiStartTime);
	DllExport uint getTotalTimePlayed() const;
	DllExport bool isAlive() const;
	DllExport bool isEverAlive() const;
	DllExport bool isTurnActive() const;
	DllExport void setTurnActive(bool bNewValue, bool bDoTurn = true);
	DllExport void setTurnActiveForPbem(bool bActive);
	DllExport bool isPbemNewTurn() const;
	DllExport void setPbemNewTurn(bool bNew);
	DllExport void setEndTurn(bool bNewValue);
	DllExport bool isTurnDone() const;
	DllExport void makeExtendedGame();
	DllExport PlayerTypes getID() const;
	DllExport HandicapTypes getHandicapType() const;
	DllExport CivilizationTypes getCivilizationType() const;
	DllExport LeaderHeadTypes getLeaderType() const;
	DllExport EraTypes getCurrentEra() const;
	DllExport TeamTypes getTeam() const;
	DllExport PlayerColorTypes getPlayerColor() const;
	DllExport int getPlayerTextColorR() const;
	DllExport int getPlayerTextColorG() const;
	DllExport int getPlayerTextColorB() const;
	DllExport bool isOption(PlayerOptionTypes eIndex) const;
	DllExport void changeUnitMoveChange(UnitClassTypes eIndex, int iChange);
	DllExport void setCivic(CivicOptionTypes eIndex, CivicTypes eNewValue);
	DllExport CvCity* firstCity(int *pIterIdx, bool bRev=false) const;
	DllExport CvCity* nextCity(int *pIterIdx, bool bRev=false) const;
	DllExport int getNumCities() const;
	DllExport CvCity* getCity(int iID) const;
	DllExport CvUnit* firstUnit(int *pIterIdx) const;
	DllExport CvUnit* nextUnit(int *pIterIdx) const;
	DllExport int getNumUnits() const;
	DllExport CvUnit* getUnit(int iID) const;
	DllExport CvUnit* getEuropeUnitById(int iId) const;
	DllExport void addMessage(const CvTalkingHeadMessage& message);
	DllExport const CvMessageQueue& getGameMessages() const;
	DllExport void addPopup(CvPopupInfo* pInfo, bool bFront = false);
	DllExport CvPopupInfo* popFrontPopup();
	DllExport const CvPopupQueue& getPopups() const;
	DllExport void addDiplomacy(CvDiploParameters* pDiplo);
	DllExport const CvDiploQueue& getDiplomacy() const;
	DllExport CvDiploParameters* popFrontDiplomacy();
	DllExport const CvString& getPbemEmailAddress() const;
	DllExport void setPbemEmailAddress(const char* szAddress);
	DllExport const CvString& getSmtpHost() const;
	DllExport void buildTradeTable(PlayerTypes eOtherPlayer, CLinkList<TradeData>& ourList, const IDInfo& kTransport) const;
	DllExport bool getHeadingTradeString(PlayerTypes eOtherPlayer, TradeableItems eItem, CvWString& szString, CvString& szIcon) const;
	DllExport bool getItemTradeString(PlayerTypes eOtherPlayer, bool bOffer, bool bShowingCurrent, const TradeData& zTradeData, const IDInfo& kTransport, CvWString& szString, CvString& szIcon) const;
	DllExport void updateTradeList(PlayerTypes eOtherPlayer, CLinkList<TradeData>& ourInventory, const CLinkList<TradeData>& ourOffer, const CLinkList<TradeData>& theirOffer, const IDInfo& kTransport) const;
	DllExport int getMaxGoldTrade(PlayerTypes eOtherPlayer, const IDInfo& kTransport) const;
	DllExport void doAction(PlayerActionTypes eAction, int iData1, int iData2, int iData3);
CvPlayerAI.h
	DllExport static CvPlayerAI& getPlayerNonInl(PlayerTypes ePlayer);
	DllExport static bool areStaticsInitialized();
	DllExport DiploCommentTypes AI_getGreeting(PlayerTypes ePlayer);
CvPlot.h
	DllExport float getPointX() const;
	DllExport float getPointY() const;
	DllExport NiPoint3 getPoint() const;
	DllExport TeamTypes getTeam() const;
	DllExport bool isLake() const;
	DllExport bool isRiverCrossingFlowClockwise(DirectionTypes eDirection) const;
	DllExport int plotCount(ConstPlotUnitFunc funcA, int iData1A = -1, int iData2A = -1, PlayerTypes eOwner = NO_PLAYER, TeamTypes eTeam = NO_TEAM, ConstPlotUnitFunc funcB = NULL, int iData1B = -1, int iData2B = -1) const;
	DllExport bool isActiveVisible(bool bDebug) const;
	DllExport bool isGoody(TeamTypes eTeam = NO_TEAM) const;
	DllExport bool isCity(bool bCheckImprovement = false, TeamTypes eForTeam = NO_TEAM) const;
	DllExport bool isVisibleEnemyUnit(PlayerTypes ePlayer) const;
	DllExport bool isFighting() const;
	DllExport bool isRoute() const;
	DllExport int getX() const;
	DllExport int getY() const;
	DllExport int getFeatureVariety() const;
	DllExport bool isNOfRiver() const;
	DllExport bool isWOfRiver() const;
	DllExport CardinalDirectionTypes getRiverNSDirection() const;
	DllExport CardinalDirectionTypes getRiverWEDirection() const;
	DllExport PlayerTypes getOwner() const;
	DllExport bool isWater() const;
	DllExport bool isHills() const;
	DllExport bool isPeak() const;
	DllExport TerrainTypes getTerrainType() const;
	DllExport FeatureTypes getFeatureType() const;
	DllExport BonusTypes getBonusType() const;
	DllExport ImprovementTypes getImprovementType() const;
	DllExport CvCity* getPlotCity() const;
	DllExport CvCity* getWorkingCity() const;
	DllExport int getYield(YieldTypes eIndex) const;
	DllExport int getCulture(PlayerTypes eIndex) const;
	DllExport int countTotalCulture() const;
	DllExport PlayerTypes getRevealedOwner(TeamTypes eTeam, bool bDebug) const;
	DllExport bool isRiverCrossing(DirectionTypes eIndex) const;
	DllExport bool isRevealed(TeamTypes eTeam, bool bDebug) const;
	DllExport bool isLayoutDirty() const;							// The plot layout contains bonuses and improvements --- it is, like the city layout, passively computed by LSystems
	DllExport void setLayoutDirty(bool bDirty);
	DllExport bool isLayoutStateDifferent() const;
	DllExport void setLayoutStateToCurrent();
	DllExport void getVisibleImprovementState(ImprovementTypes& eType, bool& bWorked);				// determines how the improvement state is shown in the engine
	DllExport void getVisibleBonusState(BonusTypes& eType, bool& bImproved, bool& bWorked);		// determines how the bonus state is shown in the engine
	DllExport CvRoute* getRouteSymbol() const;
	DllExport CvRiver* getRiverSymbol() const;
	DllExport CvFlagEntity* getFlagSymbol() const;
	DllExport void updateFlagSymbol();
	DllExport CvUnit* getCenterUnit() const;
	DllExport CvUnit* getDebugCenterUnit() const;
	DllExport CLLNode<IDInfo>* nextUnitNode(CLLNode<IDInfo>* pNode) const;
	DllExport CLLNode<IDInfo>* headUnitNode() const;
	DllExport const char* getResourceLayerIcon(ResourceLayerOptions eOption, CvWStringBuffer& szHelp, PlotIndicatorVisibilityFlags& eVisibilityFlag, ColorTypes& eColor) const;
	DllExport CvUnit* getUnitLayerUnit(UnitLayerOptionTypes eOption, CvWStringBuffer& szHelp, PlotIndicatorVisibilityFlags& eVisibilityFlag, ColorTypes& eColor, bool& bTestEnemyVisibility) const;
CvPopupInfo.h
	DllExport CvPopupInfo(ButtonPopupTypes eButtonPopupType = BUTTONPOPUP_TEXT, int iData1 = -1, int iData2 = -1, int iData3 = -1, int iFlags = 0, bool bOption1 = false, bool bOption2 = false);
	DllExport virtual ~CvPopupInfo();
	DllExport void read(FDataStreamBase& stream);
	DllExport void write(FDataStreamBase& stream) const;
	DllExport const CvPopupInfo& operator=(const CvPopupInfo& other);
	DllExport int getData1() const;
	DllExport int getData2() const;
	DllExport int getData3() const;
	DllExport int getFlags() const;
	DllExport bool getOption1() const;
	DllExport bool getOption2() const;
	DllExport ButtonPopupTypes getButtonPopupType() const;
	DllExport const CvWString& getText() const;
	DllExport bool getPendingDelete() const;
	DllExport const CvString& getOnFocusPythonCallback() const;
	DllExport const CvString& getOnClickedPythonCallback() const;
	DllExport const CvString& getPythonModule() const;
	DllExport const CvWString& getPythonButtonText(int i) const;
	DllExport const CvString& getPythonButtonArt(int i) const;
	DllExport int getNumPythonButtons() const;
	DllExport void setData1(int iValue);
	DllExport void setData2(int iValue);
	DllExport void setData3(int iValue);
	DllExport void setFlags(int iValue);
	DllExport void setOption1(bool bValue);
	DllExport void setOption2(bool bValue);
	DllExport void setButtonPopupType(ButtonPopupTypes eValue);
	DllExport void setText(const wchar* pszText);
	DllExport void setPendingDelete(bool bDelete);
	DllExport void setOnFocusPythonCallback(const char* szOnFocus);
	DllExport void setOnClickedPythonCallback(const char* szOnClicked);
	DllExport void setPythonModule(const char* szModule);
	DllExport void addPythonButton(const wchar* szText, const char* szArt);
CvPopupReturn.h
	DllExport PopupReturn();
	DllExport void setSelectedRadioButton(int iValue, int iGroup = 0);
	DllExport int getSelectedRadioButton(int iGroup = 0) const;
	DllExport void setCheckboxBitfield(int iValue, int iGroup = 0);
	DllExport int getCheckboxBitfield(int iGroup = 0) const;
	DllExport void setEditBoxString(const wchar* szValue, int iGroup = 0);
	DllExport const wchar* getEditBoxString(int iGroup = 0) const;
	DllExport void setSpinnerWidgetValue(int iValue, int iGroup = 0);
	DllExport int getSpinnerWidgetValue(int iGroup = 0) const;
	DllExport void setSelectedPulldownValue(int iValue, int iGroup = 0);
	DllExport int getSelectedPullDownValue(int iGroup = 0) const;
	DllExport void setSelectedListBoxValue(int iValue, int iGroup = 0);
	DllExport int getSelectedListBoxValue(int iGroup = 0) const;
	DllExport void setCurrentSpinBoxValue(int iValue, int iIndex = 0);
	DllExport int getCurrentSpinBoxValue( int iIndex = 0 ) const;
	DllExport void setButtonClicked(int iValue, int iGroup = 0);
	DllExport int getButtonClicked( int iGroup = 0 ) const;
	DllExport void read(FDataStreamBase* pStream);
	DllExport void write(FDataStreamBase* pStream) const;
CvRandom.h
	DllExport CvRandom();
	DllExport virtual ~CvRandom();
	DllExport void init(unsigned long ulSeed);
	DllExport unsigned short get(unsigned short usNum, char const* pszLog = NULL);  //  Returns value from 0 to num-1 inclusive.
	DllExport float getFloat();
	DllExport float getGaussian(float fMean, float fStandardDeviation);
	DllExport void shuffleSequence(std::vector<int>& aNumbers, char const* pszLog);
CvReplayInfo.h
	DllExport CvReplayInfo();
	DllExport int getMapHeight() const;
	DllExport int getMapWidth() const;
	DllExport const unsigned char* getMinimapPixels() const;
	DllExport const char* getModName() const;
	DllExport bool read(FDataStreamBase& stream);
CvSelectionGroup.h
	DllExport void init(int iID, PlayerTypes eOwner);
	DllExport void uninit();
	DllExport void reset(int iID = 0, PlayerTypes eOwner = NO_PLAYER, bool bConstructorCall = false);
	DllExport void pushMission(MissionTypes eMission, int iData1 = -1, int iData2 = -1, int iFlags = 0, bool bAppend = false, bool bManual = false, MissionAITypes eMissionAI = NO_MISSIONAI, CvPlot* pMissionAIPlot = NULL, CvUnit* pMissionAIUnit = NULL);
	DllExport void autoMission();
	DllExport CvPlot* lastMissionPlot();
	DllExport bool canDoInterfaceMode(InterfaceModeTypes eInterfaceMode);
	DllExport bool canDoInterfaceModeAt(InterfaceModeTypes eInterfaceMode, CvPlot* pPlot);
	DllExport bool isBusy();
	DllExport bool canAllMove();
	DllExport bool canMoveInto(CvPlot* pPlot, bool bAttack = false);
	DllExport bool canMoveOrAttackInto(CvPlot* pPlot, bool bDeclareWar = false);
	DllExport void NotifyEntity(MissionTypes eMission);
	DllExport CvPlot* plot() const;
	DllExport bool readyToSelect(bool bAny = false);
	DllExport PlayerTypes getOwner() const;
	DllExport void clearUnits();
	DllExport bool addUnit(CvUnit* pUnit, bool bMinimalChange);
	DllExport CLLNode<IDInfo>* deleteUnitNode(CLLNode<IDInfo>* pNode);
	DllExport inline CLLNode<IDInfo>* nextUnitNode(CLLNode<IDInfo>* pNode) const
	DllExport int getNumUnits() const;
	DllExport int getUnitIndex(CvUnit* pUnit, int maxIndex = -1) const;
	DllExport CLLNode<IDInfo>* headUnitNode() const;
	DllExport CvUnit* getHeadUnit() const;
	DllExport CLLNode<MissionData>* nextMissionQueueNode(CLLNode<MissionData>* pNode) const;
	DllExport CLLNode<MissionData>* headMissionQueueNode() const;
CvSelectionGroupAI.h
	DllExport CvSelectionGroupAI();
	DllExport virtual ~CvSelectionGroupAI();
CvStructs.h
struct DllExport XYCoords
struct DllExport IDInfo
struct DllExport GameTurnInfo
struct DllExport OrderData
struct DllExport MissionData
struct DllExport TradeData
struct DllExport FOWVis
struct DllExport PBGameSetupData
struct DllExport PBPlayerSetupData
struct DllExport PBPlayerAdminData
class DllExport CvBattleRound
class DllExport CvMissionDefinition
class DllExport CvBattleDefinition : public CvMissionDefinition
struct DllExport CvWidgetDataStruct
CvTalkingHeadMessage.h
	DllExport CvTalkingHeadMessage(int iMessageTurn = 0, int iLen = 0, LPCWSTR pszDesc = NULL, LPCTSTR pszSound = NULL, InterfaceMessageTypes eType = MESSAGE_TYPE_INFO, LPCTSTR icon = NULL, ColorTypes eColor = NO_COLOR, int iX = -1, int iY = -1, bool bShowOffScreenArrows = false, bool bShowOnScreenArrows = false);
	DllExport virtual ~CvTalkingHeadMessage(void);
	DllExport const wchar* getDescription() const;
	DllExport const CvString& getSound() const;
	DllExport const CvString& getIcon() const;
	DllExport int getLength() const;
	DllExport void setLength(int iLength);
	DllExport ColorTypes getFlashColor() const;
	DllExport int getX() const;
	DllExport int getY() const;
	DllExport bool getOffScreenArrows() const;
	DllExport bool getOnScreenArrows() const;
	DllExport int getTurn() const;
	DllExport InterfaceMessageTypes getMessageType() const;
	DllExport ChatTargetTypes getTarget() const;
	DllExport void setTarget(ChatTargetTypes eType);
	DllExport PlayerTypes getFromPlayer() const;
	DllExport void setFromPlayer(PlayerTypes eFromPlayer);
	DllExport bool getShown() const;
	DllExport void setShown(bool bShown);
CvTeam.h
	DllExport void init(TeamTypes eID);
	DllExport void reset(TeamTypes eID = (TeamTypes)0, bool bConstructorCall = false);
	DllExport bool canDeclareWar(TeamTypes eTeam) const;
	DllExport void declareWar(TeamTypes eTeam, bool bNewDiplo, WarPlanTypes eWarPlan);
	DllExport void makePeace(TeamTypes eTeam, bool bBumpUnits = true);
	DllExport CvWString getName() const;
	DllExport int getNumMembers() const;
	DllExport int getAliveCount() const;
	DllExport bool isMapCentering() const;
	DllExport bool isAtWar(TeamTypes eIndex) const;
	DllExport int countNumHumanGameTurnActive() const;
CvTeamAI.h
	DllExport static CvTeamAI& getTeamNonInl(TeamTypes eTeam);
CvUnit.h
	DllExport void NotifyEntity(MissionTypes eMission);
	DllExport void doCommand(CommandTypes eCommand, int iData1, int iData2);
	DllExport bool canSleep(const CvPlot* pPlot) const;
	DllExport bool canFortify(const CvPlot* pPlot) const;
	DllExport CivilizationTypes getCivilizationType() const;
	DllExport DomainTypes getDomainType() const;
	DllExport bool canMove() const;
	DllExport bool hasMoved() const;
	DllExport BuildTypes getBuildType() const;
	DllExport bool isFighting() const;
	DllExport bool isAttacking() const;
	DllExport bool isDefending() const;
	DllExport int maxHitPoints() const;
	DllExport bool isDead() const;
	DllExport float maxCombatStrFloat(const CvPlot* pPlot, const CvUnit* pAttacker) const;
	DllExport float currCombatStrFloat(const CvPlot* pPlot, const CvUnit* pAttacker) const;
	DllExport bool canFight() const;
	DllExport bool isWaiting() const;
	DllExport bool isFortifyable() const;
	DllExport bool isRanged() const;
	DllExport bool isInvisible(TeamTypes eTeam, bool bDebug, bool bCheckCargo = true) const;
	DllExport int getID() const;
	DllExport IDInfo getIDInfo() const;
	DllExport bool isGroupHead() const;
	DllExport CvSelectionGroup* getGroup() const;
	DllExport void joinGroup(CvSelectionGroup* pSelectionGroup, bool bRemoveSelected = false, bool bRejoin = true);
	DllExport int getHotKeyNumber();
	DllExport int getX() const;
	DllExport int getY() const;
	DllExport bool atPlot(const CvPlot* pPlot) const;
	DllExport CvPlot* plot() const;
	DllExport int getDamage() const;
	DllExport int getCombatTimer() const;
	DllExport DirectionTypes getFacingDirection(bool checkLineOfSightProperty) const;
	DllExport ProfessionTypes getProfession() const;
	DllExport bool isPromotionReady() const;
	DllExport void setPromotionReady(bool bNewValue);
	DllExport bool isInfoBarDirty() const;
	DllExport void setInfoBarDirty(bool bNewValue);
	DllExport PlayerTypes getOwner() const;
	DllExport PlayerTypes getVisualOwner(TeamTypes eForTeam = NO_TEAM) const;
	DllExport TeamTypes getTeam() const;
	DllExport PlayerColorTypes getPlayerColor(TeamTypes eForTeam = NO_TEAM) const;
	DllExport CivilizationTypes getVisualCiv(TeamTypes eForTeam = NO_TEAM) const;
	DllExport UnitTypes getUnitType() const;
	DllExport CvUnitInfo &getUnitInfo() const;
	DllExport UnitTypes getLeaderUnitType() const;
	DllExport CvUnit* getCombatUnit() const;
	DllExport CvPlot* getPostCombatPlot() const;
	DllExport CvUnit* getTransportUnit() const;
	DllExport const CvWString getName(uint uiForm = 0) const;
	DllExport int getSubUnitsAlive() const;
	DllExport bool isEnemy(TeamTypes eTeam, const CvPlot* pPlot = NULL) const;
	DllExport bool isOnMap() const;
	DllExport const CvArtInfoUnit* getArtInfo(int i) const;
	DllExport char const* getButton() const;
CvXMLLoadUtility.h
	DllExport CvXMLLoadUtility();
	DllExport ~CvXMLLoadUtility(void);
	DllExport bool LoadPostMenuGlobals();
	DllExport bool LoadPreMenuGlobals();
	DllExport bool LoadBasicInfos();
	DllExport bool LoadPlayerOptions();
	DllExport bool LoadGraphicOptions();
	DllExport bool SetGlobalDefines();
	DllExport bool SetGlobalTypes();
	DllExport bool SetPostGlobalsGlobalDefines();
	DllExport void CleanUpGlobalVariables();
	DllExport void ResetLandscapeInfo();
	DllExport bool SetupGlobalLandscapeInfo();
	DllExport bool SetGlobalArtDefines();
	DllExport bool LoadGlobalText();
	DllExport void ResetGlobalEffectInfo();
CyArgsList.h
	DllExport CyArgsList() : m_iCnt(0) {}
	DllExport void add(int i);
	DllExport void add(uint ui) { add((int)ui);	}
	DllExport void add(float f);
	DllExport void add(const char* s);					// null-terminated string
	DllExport void add(const wchar* s);					// null-terminated widestring
	DllExport void add(const char* s, int iLength);		// makes a data string
	DllExport void add(const byte* s, int iLength);		// makes a list
	DllExport void add(const int* s, int iLength);		// makes a list
	DllExport void add(const float* s, int iLength);		// makes a list
	DllExport void add(void* p);
	DllExport void* makeFunctionArgs();
	DllExport int size() const { return m_iCnt;	}
	DllExport void push_back(void* p) { FAssertMsg(m_iCnt<MAX_CY_ARGS, "increase cyArgsList::MAX_CY_ARGS"); m_aList[m_iCnt++] = p; }
	DllExport void clear() { m_iCnt=0;	}
CyCity.h
	DllExport CyCity(CvCity* pCity);		// Call from C++
CyMap.h
	DllExport CyMap();
CyPlot.h
	DllExport CyPlot();
	DllExport CyPlot(CvPlot*);			// Call from C++
	DllExport NiPoint3 getPoint();
CyUnit.h
	DllExport CyUnit(CvUnit* pUnit);		// Call from C++

