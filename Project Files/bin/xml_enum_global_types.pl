#!/usr/bin/perl -w


use strict;
use warnings;

use Data::Dumper;

use XML::LibXML::Reader;
use lib './bin';
use XMLlists;

my $GENERATE_INFOARRAY = 0;


my @enums;
my %enumValues;

my @enumsToSkip =
(
	"AnimationOperatorTypes",
	"FunctionTypes",
	"DiplomacyPowerTypes",
	"AutomateTypes",
	"DirectionTypes",
	"InterfaceVisibility",
	"ArtStyleTypes",
	"ContactTypes",
	"CitySizeTypes",
	"FootstepAudioTypes",
);

my @enumsToNotUseEnumCounter =
(
	"AnimationOperatorTypes",
	"ArtStyleTypes",
	"AutomateTypes",
	"FootstepAudioTypes",
);

my @enumsNoJit =
(
	"ButtonPopupTypes",
	"WidgetTypes",
);


my $FILE         = getAutoDir() . "/AutoGlobalDefineEnum.h";
my $FILE_CPP     = getAutoDir() . "/AutoGlobalDefineEnumCpp.h";
my $FILE_CASE    = getAutoDir() . "/AutoGlobalDefineEnumCase.h";

my $output         = "";
my $output_case    = "";

$output .= "#ifndef AUTO_XML_ENUM_GLOBAL\n";
$output .= "#define AUTO_XML_ENUM_GLOBAL\n";
$output .= "\n";
$output .= "// Autogenerated file. Do not edit!!!\n";
$output .= "\n";
$output .= "#include \"../CvEnumsFunctions.h\"\n";
$output .= "\n";



getTypesInFile("GlobalTypes.xml");



foreach my $enum (@enums)
{
	next if shouldSkipEnum($enum);
	
	$output .= "enum " . $enum . "\n{\n";
	$output .= "\tNO_" . getEnumUpperCase($enum) . " = -1,\n";
	
	foreach my $value (@{$enumValues{$enum}})
	{
		$output .= "\t";
		$output .= $value;
		$output .= ",\n";
	}
	my $upperName = getEnumUpperCase($enum);
	
	$output .= "\n\t" . getMaxName($upperName) . ",\n";
	$output .= "\t" . getFirstName($upperName) . " = 0,\n";
	$output .= "};\n\n";
}

foreach my $enum (@enums)
{
	next if shouldSkipEnum($enum);
	my $upperName = getEnumUpperCase($enum);
	my $numTypes = getMaxName($upperName);
	my $first = getFirstName($upperName);
	my $jit = "JIT_ARRAY_" . $upperName;
	
	$jit = "NO_JIT_ARRAY_TYPE" if noJit($enum);
	
	addgetIndexOfTypeCase($enum, $jit);
	
	handleOperators($enum);
	
	$output .= "template <> struct VARINFO<" . $enum . ">\n{\n";
	$output .= "\tstatic const JITarrayTypes JIT = " . $jit . ";\n";
	$output .= "\tstatic const $enum DEFAULT = static_cast<$enum>(-1);\n";
	$output .= "\tstatic const char* getName() { return \"" . $enum . "\";}\n";
	$output .= "\tstatic const VariableTypes TYPE = (int)" . $numTypes . " < 128 ? VARIABLE_TYPE_CHAR : VARIABLE_TYPE_SHORT;\n";
	$output .= "\tstatic const VariableLengthTypes LENGTH_KNOWN_WHILE_COMPILING = VARIABLE_LENGTH_ALL_KNOWN;\n";
	$output .= "\tstatic const $enum FIRST = " . $first . ";\n";
	$output .= "\tstatic const $enum END = " . $numTypes . ";\n";
	$output .= "\tstatic const $enum LAST = " . $numTypes . ";\n";
	$output .= "\tstatic const $enum NUM_ELEMENTS = " . $numTypes . ";\n";
	$output .= "\tstatic const $enum LENGTH = " . $numTypes . ";\n";
	$output .= "\tstatic $enum start() { return " . $first . ";}\n";
	$output .= "\tstatic $enum end() { return " . $numTypes . ";}\n";
	$output .= "\tstatic $enum length() { return $numTypes;}\n";
	$output .= "\tstatic bool isInRange($enum eIndex) { return eIndex >= FIRST && eIndex <= LAST;}\n";
	$output .= "\ttemplate <int T> struct STATIC {\n";
	$output .= "\t\tstatic const VariableStaticTypes VAL = T * ((int)TYPE == (int)VARIABLE_TYPE_CHAR ? 1 : 2) <= 4 ? VARIABLE_TYPE_STATIC : VARIABLE_TYPE_DYNAMIC;\n";
	$output .= "\t};\n";
	$output .= "};\n";
	
	handleInfoArray($enum, $jit);
}

$output .= "#endif\n";

writeFile($FILE        , \$output        );

$output = "\n// autogeneted file!\n// do not edit\n\n";
$output .= "#include \"../CvEnumsFunctions.h\"\n\n";

foreach my $enum (@enums)
{
	$output .= "\ntemplate<>\n";
	$output .= "const char* getTypeStr(" . $enum . " eIndex)\n{\n";
	$output .= "\tswitch(eIndex)\n\t{\n";
	
	my $i = 0;
	foreach my $value (@{$enumValues{$enum}})
	{
		$output .= "\t\tcase ";
		if (useEnumNamesAsCounter($enum))
		{
			$output .= $value;
		}
		else
		{
			$output .= $i;
			$i = $i + 1;
		}
		$output .= ": return \"" . $value . "\";\n";
	}
	$output .= "\t}\n";
	$output .= "\treturn \"\";\n";
	$output .= "}\n";

}

writeFile($FILE_CPP     , \$output        );
writeFile($FILE_CASE    , \$output_case   );


exit();



sub getTypesInFile
{
	my $filename = shift;
	
	my $fileWithPath = getFileWithPath($filename);
	
	if ($fileWithPath)
	{
		my $reader = XML::LibXML::Reader->new(location => $fileWithPath)
			or die "cannot read file '$fileWithPath': $!\n";
		
		my $enumSet = 0;
		my $enum = "";
		
		
		while($reader->read)
		{
			if ($reader->nodeType == 1 and $reader->depth == 1)
			{
				$enumSet = 0;
				$enum = getEnumName($reader->name);
			}
			elsif ($reader->nodeType == 3 and $reader->depth == 3)
			{
				if ($enumSet == 0)
				{
					$enumSet = 1;
					push(@enums, $enum);
					initList($enum);
					
				}
				push(@{$enumValues{$enum}}, $reader->value);
			}
		}
	}
}

sub getEnumName
{
	my $enum = shift;
	return "InterfaceVisibility" if $enum eq "InterfaceVisibilityTypes";
	return $enum;
}

sub getMaxName
{
	my $name = shift;
	
	return "MAX_NUM_SYMBOLS" if $name eq "FONT_SYMBOLS";
	return "NUM_BUTTONPOPUP_TYPES" if $name eq "BUTTON_POPUP";
	
	return "NUM_" . $name . "_TYPES";
}

sub getFirstName
{
	my $name = shift;
	
	return "FIRST_FONTSYMBOL" if $name eq "FONT_SYMBOLS";
	
	return "FIRST_" . $name;
}

sub shouldSkipEnum
{
	my $enum = shift;
	
	foreach my $loop_enum (@enumsToSkip)
	{
		return 1 if $enum eq $loop_enum;
	}
	return 0;
}

sub noJit
{
	my $enum = shift;
	
	foreach my $loop_enum (@enumsNoJit)
	{
		return 1 if $enum eq $loop_enum;
	}
	return 0;
}

sub useEnumNamesAsCounter
{
	my $enum = shift;
	
	foreach my $loop_enum (@enumsToNotUseEnumCounter)
	{
		return 0 if $enum eq $loop_enum;
	}
	return 1;
}

sub getChild
{
	my $parent = shift;
	my $name = shift;
	
	my $element = $parent->firstChild;
	
	while (1)
	{
		return if (ref($element) eq "");
		if (ref($element) eq "XML::LibXML::Element")
		{
			return $element if $name eq "" or $element->nodeName eq $name;
		}
		$element = $element->nextSibling;
	}
}

sub nextSibling
{
	my $element = shift;
	
	$element = $element->nextSibling;
	while (ref($element) ne "XML::LibXML::Element" and ref($element) ne "")
	{
		$element = $element->nextSibling;
	}
	return $element;
}

sub removeType
{
	my $type = shift;
	if (substr($type, -5) eq "Types")
	{
		$type = substr($type, 0, -5);
	}
	return $type;
}

sub getEnumUpperCase
{
	my $original = shift;
	my $result = substr($original, 0, 1);
	
	$original = substr($original, 1);
	
	if (substr($original, -5) eq "Types")
	{
		$original = substr($original, 0, -5);
	}
	
	foreach my $char (split //, $original)
	{
		my $newChar = uc($char);
		$result .= "_" if $char eq $newChar;
		$result .= $newChar;
	}
	
	return $result;
}

sub handleOperators
{
	my $type = shift;
	
	operatorAdd($type, "+");
	operatorAdd($type, "-");
	
	operator($type, "++", 0);
	operator($type, "++", 1);
	operator($type, "--", 0);
	operator($type, "--", 1);
}

sub operator
{
	my $type = shift;
	my $operator = shift;
	my $postfix = shift;
	
	$output .= "static inline $type";
	$output .= "&" unless $postfix;
	$output .= " operator" . $operator . "($type& c";
	$output .= ", int" if $postfix;
	$output .= ")\n";
	$output .= "{\n";
	$output .= "\t" . $type . " cache = c;\n" if $postfix;
	$output .= "\tc = static_cast<$type>(c " . substr($operator, 0, 1) . " 1);\n";
	$output .= "\treturn ";
	$output .=  "c" unless $postfix;
	$output .=  "cache" if $postfix;
	$output .= ";\n";
	$output .= "};\n";
}

sub operatorAdd
{
	my $type = shift;
	my $operator = shift;
	
	$output .= "static inline $type operator" . $operator . "(const $type& A, const $type& B)\n";
	$output .= "{\n";
	$output .= "\treturn static_cast<$type>((int)A $operator (int)B);\n";
	$output .= "};\n";
}

sub addgetIndexOfTypeCase
{
	my $type = shift;
	my $jit  = shift;
	
	return if $jit eq "NO_JIT_ARRAY_TYPE";
	
	$output_case .= "\t\tcase $jit:\n";
	$output_case .= "\t\t{\n";
	$output_case .= "\t\t\t$type eTmp;\n";
	$output_case .= "\t\t\treturn getIndexOfType(eTmp, szType);\n";
	$output_case .= "\t\t}\n";
}

sub handleInfoArray
{
	my $type = shift;
	my $jit  = shift;
	
	return unless $GENERATE_INFOARRAY;
	return if $jit eq "NO_JIT_ARRAY_TYPE";
	
	handleInfoArraySingle($type, 1);
	handleInfoArraySingle($type, 2);
	handleInfoArraySingle($type, 3);
	handleInfoArraySingle($type, 4);

}sub handleInfoArraySingle
{
	my $type = shift;
	my $id = shift;
	my $get = "get" . removeType($type);
	my $index = $id - 1;
	
	$get = "getFontSymbol" if $get eq "getFontSymbols";
	
	$output .= "template<" . addtemplates("typename T", $id, 0) . ">\nclass InfoArray$id<" . addtemplates("T", $id, 1) . $type . ">\n\t: ";
	$output .= "public InfoArray$index<" . addtemplates("T", $id, 0) . ">\n" unless $id == 1;
	$output .= "protected InfoArrayBase\n\t, public boost::noncopyable\n" if $id == 1;
	$output .= "{\n";
	$output .= "\tfriend class CyInfoArray;\n";
	$output .= "public:\n";
	if ($id == 1)
	{
		$output .= "\tint getLength() const\n\t{\n\t\treturn InfoArrayBase::getLength();\n\t}\n";
		$output .= "\t$type get(int iIndex) const\n";
		$output .= "\t{\n";
		$output .= "\t\treturn static_cast<$type>(getInternal(iIndex, $index));\n";
		$output .= "\t}\n";
	}
	$output .= "\t$type get$index(int iIndex) const\n";
	$output .= "\t{\n";
	$output .= "\t\treturn static_cast<$type>(getInternal(iIndex, $index));\n";
	$output .= "\t}\n";
	$output .= "\t$type $get(int iIndex) const\n";
	$output .= "\t{\n";
	$output .= "\t\treturn static_cast<$type>(getInternal(iIndex, $index));\n";
	$output .= "\t}\n";
	$output .= "\tint getIndexOf($type eValue) const\n";
	$output .= "\t{\n";
	$output .= "\t\treturn _getIndexOf(eValue, $index);\n";
	$output .= "\t}\n";
	$output .= "protected:\n";
	$output .= "friend class CvCity;\n" if $id == 1;
	$output .= "friend class CvGlobals;\n" if $id == 1;
	$output .= "friend class CivEffectInfo;\n" if $id == 1;
	$output .= "friend class CvPlayerCivEffect;\n" if $id == 1;
	$output .= "friend class CvInfoBase;\n" if $id == 1;
	$output .= "\tInfoArray$id(JITarrayTypes eType0, JITarrayTypes eType1, JITarrayTypes eType2, JITarrayTypes eType3)\n";
	$output .= "\t\t: InfoArray" . ($id - 1) . "<" . addtemplates("T", $id, 0) . ">(eType0, eType1, eType2, eType3) {}\n" unless $id == 1;
	$output .= "\t\t: InfoArrayBase(eType0, eType1, eType2, eType3) {}\n" if $id == 1;
	$output .= "};\n";
}

sub addtemplates
{
	my $str = shift;
	my $id = shift;
	my $append_comma = shift;
	
	my $return = "";
	
	my $i = 1;
	
	return $return if $i == $id;
	$return .=  $str . "0";
	$i = 2;
	
	while ($i < $id)
	{
		$return .=  ", " . $str . ($i - 1);
		$i += 1;
	}
	
	$return .= ", " if $append_comma;
	return $return;
}

sub initList
{
	my $enum = shift;
	
	$enumValues{$enum} = ();
	
	if ($enum eq "ButtonPopupTypes")
	{
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_TEXT");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_MAIN_MENU");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_CONFIRM_MENU");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_DECLAREWARMOVE");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_CONFIRMCOMMAND");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_CONFIRMTASK");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_LOADUNIT");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_LOAD_CARGO");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_LEADUNIT");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_RAZECITY");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_CHOOSEPRODUCTION");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_CHOOSE_YIELD_BUILD");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_CHOOSE_EDUCATION");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_ALARM");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_DEAL_CANCELED");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_PYTHON");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_FEAT");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_PYTHON_SCREEN");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_MOVIE");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_DETAILS");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_ADMIN");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_ADMIN_PASSWORD");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_EXTENDED_GAME");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_DIPLOMACY");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_ADDBUDDY");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_FORCED_DISCONNECT");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_PITBOSS_DISCONNECT");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_KICKED");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_EVENT");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_FREE_COLONY");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_CHOOSE_PROFESSION");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_PURCHASE_EUROPE_UNIT");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_FOUNDING_FATHER");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_CIVIC_OPTION");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_TRADE_ROUTES");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_YIELD_IMPORT_EXPORT");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_PROMOTE");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_CHOOSE_GOODY");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_SELECT_YIELD_AMOUNT");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_EUROPE_UNIT");
		push(@{$enumValues{ButtonPopupTypes}}, "BUTTONPOPUP_TALK_NATIVES");
	}
	elsif ($enum eq "WidgetTypes")
	{
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PLOT_LIST");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PLOT_LIST_SHIFT");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_CITY_SCROLL");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_LIBERATE_CITY");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_CITY_NAME");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_UNIT_NAME");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_CREATE_GROUP");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_DELETE_GROUP");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_TRAIN");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_CONSTRUCT");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_CONVINCE");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_HURRY");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PLAYER_HURRY");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_MENU_ICON");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_ACTION");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_CITIZEN");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_CONTACT_CIV");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_SCORE_BREAKDOWN");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_ZOOM_CITY");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_END_TURN");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_AUTOMATE_CITIZENS");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_AUTOMATE_PRODUCTION");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_EMPHASIZE");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_DIPLOMACY_RESPONSE");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_GENERAL");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_FILE_LISTBOX");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_FILE_EDITBOX");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_WB_UNITNAME_EDITBOX");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_WB_CITYNAME_EDITBOX");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_WB_SAVE_BUTTON");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_WB_LOAD_BUTTON");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_WB_ALL_PLOTS_BUTTON");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_WB_LANDMARK_BUTTON");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_WB_ERASE_BUTTON");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_WB_EXIT_BUTTON");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_WB_UNIT_EDIT_BUTTON");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_WB_CITY_EDIT_BUTTON");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_WB_NORMAL_PLAYER_TAB_MODE_BUTTON");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_WB_NORMAL_MAP_TAB_MODE_BUTTON");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_WB_REVEAL_TAB_MODE_BUTTON");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_WB_DIPLOMACY_MODE_BUTTON");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_WB_REVEAL_ALL_BUTTON");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_WB_UNREVEAL_ALL_BUTTON");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_WB_REGENERATE_MAP");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_TRADE_ITEM");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_UNIT_MODEL");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_POPUP_QUEUE");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PYTHON");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_HELP_DEFENSE");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_HELP_POPULATION");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_HELP_REBEL");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_HELP_GREAT_GENERAL");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_HELP_SELECTED");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_HELP_YIELD");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_HELP_PROMOTION");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_HELP_UNIT_PROMOTION");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_CHOOSE_EVENT");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PEDIA_JUMP_TO_UNIT");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PEDIA_JUMP_TO_PROFESSION");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PEDIA_JUMP_TO_BUILDING");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PEDIA_BACK");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PEDIA_FORWARD");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PEDIA_JUMP_TO_BONUS");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PEDIA_MAIN");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PEDIA_JUMP_TO_PROMOTION");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PEDIA_JUMP_TO_IMPROVEMENT");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PEDIA_JUMP_TO_CIVIC");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PEDIA_JUMP_TO_CIV");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PEDIA_JUMP_TO_LEADER");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PEDIA_JUMP_TO_TERRAIN");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PEDIA_JUMP_TO_YIELDS");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PEDIA_JUMP_TO_FEATURE");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PEDIA_JUMP_TO_FATHER");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_TURN_EVENT");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PEDIA_DESCRIPTION");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PEDIA_DESCRIPTION_NO_HELP");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_DEAL_KILL");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_MINIMAP_HIGHLIGHT");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_PRODUCTION_MOD_HELP");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_LEADERHEAD");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_LEADER_LINE");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_CLOSE_SCREEN");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_GLOBELAYER");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_GLOBELAYER_OPTION");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_GLOBELAYER_TOGGLE");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_CITY_UNIT_ASSIGN_PROFESSION");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_MOVE_CARGO_TO_CITY");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_RECEIVE_MOVE_CARGO_TO_CITY");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_MOVE_CARGO_TO_TRANSPORT");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_RECEIVE_MOVE_CARGO_TO_TRANSPORT");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_CREATE_TRADE_ROUTE");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_EDIT_TRADE_ROUTE");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_YIELD_IMPORT_EXPORT");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_ASSIGN_CITIZEN_TO_PLOT");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_ASSIGN_TRADE_ROUTE");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_EJECT_CITIZEN");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_SHIP_CARGO");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_DOCK");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_SAIL");
		push(@{$enumValues{WidgetTypes}}, "WIDGET_GOTO_CITY");
	}
}
